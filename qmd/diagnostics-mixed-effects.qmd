# Mixed Effects {#sec-diag-me .unnumbered}

## Misc {#sec-diag-me-misc .unnumbered}

-   Test all optimizers
    -   To assess whether convergence warnings render the results invalid, or to the contrary, the results can be deemed valid in spite of the warnings, Bates et al. (2023) suggest refitting models affected by convergence warnings with a variety of optimizers. ([article](https://www.r-bloggers.com/2023/06/how-to-visually-assess-the-convergence-of-a-mixed-effects-model-by-plotting-various-optimizers/))
        -   [Example]{.ribbon-highlight}: [{lme4}]{style="color: #990000"}

            ``` r
            library(lme4)
            library(dfoptim)
            library(optimx)

            fit <- lmer(fatigue ~ spin * reg + (1|ID),
                       data = testdata, REML = TRUE)

            # Refit model using all available algorithms
            multi_fit <- allFit(fit)
            #> bobyqa : [OK]
            #> Nelder_Mead : [OK]
            #> nlminbwrap : [OK]
            #> nmkbw : [OK]
            #> optimx.L-BFGS-B : [OK]
            #> nloptwrap.NLOPT_LN_NELDERMEAD : [OK]
            #> nloptwrap.NLOPT_LN_BOBYQA : [OK]
            summary(multi_fit)$fixef
            #>                               (Intercept)      spin       reg  spin:reg
            #> bobyqa                          -2.975678 0.5926561 0.1437204 0.1834016
            #> Nelder_Mead                     -2.975675 0.5926559 0.1437202 0.1834016
            #> nlminbwrap                      -2.975677 0.5926560 0.1437203 0.1834016
            #> nmkbw                           -2.975678 0.5926561 0.1437204 0.1834016
            #> optimx.L-BFGS-B                 -2.975680 0.5926562 0.1437205 0.1834016
            #> nloptwrap.NLOPT_LN_NELDERMEAD   -2.975666 0.5926552 0.1437196 0.1834017
            #> nloptwrap.NLOPT_LN_BOBYQA       -2.975678 0.5926561 0.1437204 0.1834016
            ```

            -   Article also has a custom plotting function to visually compare the results

## Residuals {#sec-diag-me-resid .unnumbered}

-   Misc

    -   [{]{style="color: #990000"}[DHARMa](https://cran.r-project.org/web/packages/DHARMa/vignettes/DHARMa.html){style="color: #990000"}[}]{style="color: #990000"} - Built for Mixed Effects Models for count distributions but *also* handles lm, glm (poisson) and MASS::glm.nb (neg.bin)

-   Binned Residuals

    -   It is not useful to plot the raw residuals, so examine binned residual plots

    -   Misc

        -   [{arm}]{style="color: #990000"} will mask some {tidyverse} functions, so don't load whole package

    -   Look for :

        -   Patterns
        -   Nonlinear trend may be indication that squared term or log transformation of predictor variable required
        -   If bins have average residuals with large magnitude
        -   Look at averages of other predictor variables across bins
        -   Interaction may be required if large magnitude residuals correspond to certain combinations of predictor variables

    -   Process

        -   Extract raw residuals
            -   Include `type.residuals = "response"` in the `broom::augment` function to get the raw residuals
        -   Order observations either by the values of the predicted probabilities (or by numeric predictor variable)
        -   Use the ordered data to create g bins of approximately equal size.
            -   Default value: g = sqrt(n)
        -   Calculate average residual value in each bin
        -   Plot average residuals vs. average predicted probability (or average predictor value)

    -   [Example]{.ribbon-highlight}: vs Predicted Values\
        ![](./_resources/Econometrics,_Mixed_Effects,_Frequentist.resources/image.1.png){width="432"}

        ``` r
        arm::binnedplot(x = risk_m_aug$.fitted, y = risk_m_aug$.resid,
                        xlab = "Predicted Probabilities",
                        main = "Binned Residual vs. Predicted Values",
                        col.int = FALSE)
        ```

    -   [Example]{.ribbon-highlight}: vs Predictor\
        ![](./_resources/Econometrics,_Mixed_Effects,_Frequentist.resources/image.2.png){width="432"}

        ``` r
        arm::binnedplot(x = risk_m_aug$ageCent,
                        y = risk_m_aug$.resid,
                        col.int = FALSE,
                        xlab = "Age (Mean-Centered)",
                        main = "Binned Residual vs. Age")
        ```

-   Check that residuals have mean zero: `mean(resid(mod))`

-   Check that residuals for each level of categorical have mean zero

    ``` r
    risk_m_aug %>%
      group_by(currentSmoker) %>%
      summarise(mean_resid = mean(.resid))
    ```

-   Check for normality.

    ``` r
    # Normal Q-Q plot
    qqnorm(resid(mod))
    qqline(resid(mod))
    ```

-   Check normality per categorical variable level

    -   [Example]{.ribbon-highlight}: 3 levels

        ``` r
        ## by level
        par(mfrow=c(1,3))

        qqnorm(resid(mod)[1:6])
        qqline(resid(mod)[1:6])

        qqnorm(resid(mod)[7:12])
        qqline(resid(mod)[7:12])

        qqnorm(resid(mod)[13:18])
        qqline(resid(mod)[13:18])
        ```

        -   Data should be sorted by random variable level before modeling. Otherwise you could column bind the residuals to the original data. Then, group by random variable and make q-q plots for each group
