# Apps {#sec-llms-app .unnumbered}

-   Packages

    -   [{]{style="color: #990000"}[statlingua](https://bgreenwell.github.io/statlingua/){style="color: #990000"}[}]{style="color: #990000"} - Designed to help bridge the gap between complex statistical outputs and clear, human-readable explanations. By leveraging the power of Large Language Models (LLMs), statlingua helps you effortlessly translate the dense jargon of statistical models — coefficients, p-values, model fit indices, and more — into straightforward, context-aware natural language.

-   Resources

    -   Dancho Agent Examples using [{{langchain}}]{style="color: goldenrod"}

        -   Automated Data Cleaning Agent ([Video](https://www.youtube.com/watch?v=RUVqPCMXh18&ab_channel=BusinessScience), [Code](https://github.com/business-science/free-ai-tips/tree/master/003_automate_data_cleaning_ai_copilot))
        -   Automated Data Wrangling Agent ([Video](https://www.youtube.com/watch?v=wZD7_8ZreTA&ab_channel=BusinessScience), [Code](https://github.com/business-science/free-ai-tips/tree/master/005_automate_data_wrangling))
        -   Automated Feature Engineering Agent ([Video](https://www.youtube.com/watch?v=x4K7mDCFZVQ&t=5s&ab_channel=BusinessScience), [Code](https://github.com/business-science/free-ai-tips/tree/master/004_automate_feature_engineering_copilot))
        -   Automated Data Visualization Agent ([Video](https://www.youtube.com/watch?v=-cz80KoBdkk), [Code](https://github.com/business-science/free-ai-tips/tree/master/007_automate_data_visualization))
        -   Automated SQL Agent and App ([Agent Video](https://www.youtube.com/watch?v=mYpkqOL1r3A&ab_channel=BusinessScience), [Agent Code](https://github.com/business-science/free-ai-tips/tree/master/008_multiagent_sql_data_analyst), [App Video](https://www.youtube.com/watch?v=fpYu9XRZZNw&ab_channel=BusinessScience), [App Code](https://github.com/business-science/free-ai-tips/tree/master/010_sql_database_agent_app))
        -   Automated H2O Machine Learning Agent ([Video](https://www.youtube.com/watch?v=GMUhdrQs8_A&ab_channel=BusinessScience), [Code](https://github.com/business-science/free-ai-tips/tree/master/009_h2o_machine_learning_agent))
        -   Automated MLFlow Agent ([Video](https://www.youtube.com/watch?v=exTEYfBzxlU&ab_channel=%F0%9F%94%A5MattDancho%F0%9F%94%A5%28BusinessScience%29), [Code](https://github.com/business-science/free-ai-tips/tree/master/011_mlops_mlflow_h2o_agent))

-   Apps

    -   [R and R Studio Tutor](https://chatgpt.com/g/g-iedyANQtM-r-and-r-studio-tutor) - GPT Studio for R or R Studio students and users
        -   Ask a question about R or R Studio or upload code that needs review or debugging
    -   Posit Shiny AI Assistant - Sends prompts to Anthropic Claude 3.5 Sonnet (i.e. not private)
        -   [Intro](https://shiny.posit.co/blog/posts/shiny-assistant/)
        -   Run locally ([github](https://github.com/posit-dev/shiny-assistant))
        -   Hosted [App](https://gallery.shinyapps.io/assistant/)
    -   [{]{style="color: #990000"}[chores](https://simonpcouch.github.io/chores){style="color: #990000"}[}]{style="color: #990000"} - Add-in that helps you automate tedious tasks. Store a prompt in a markdown file that performs a task. Bind a word or phrase to that task. Then open that add-in ui, type the word/phrase, and the llm takes care of the rest. Preloaded chores:
        -   ["cli"]{.arg-text}: [Convert to cli](https://simonpcouch.github.io/chores/reference/cli_helper.html)
        -   ["testthat"]{.arg-text}: [Convert to testthat 3](https://simonpcouch.github.io/chores/reference/testthat_helper.html)
        -   ["roxygen"]{.arg-text}: [Document functions with roxygen](https://simonpcouch.github.io/chores/reference/roxygen_helper.html)

-   [Example]{.ribbon-highlight}: Simple [{shinychat}]{style="color: #990000"} Chat Interface ([source](https://masto.machlis.com/@smach/113918164751484290))

    ``` r
    library(shiny)
    library(shinychat)

    ui <- bslib::page_fluid(chat_ui("chat"))
    server <- function(input, output, session) {
      chat <- ellmer::chat_ollama(model = "gemma2")

      observeEvent(input$chat_user_input, {
        stream <- chat$stream_async(input$chat_user_input)
        chat_append("chat", stream)
      })
    }
    shinyApp(ui, server)
    ```
