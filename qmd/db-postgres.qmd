# postgres  {#sec-db-pstgr}

## Misc  {#sec-db-pstgr-misc}

-   Notes from
    -   linkedin.learning.postgresql.client.applications-xqzt
    -   Linux.Academy.PostgreSQL.Administration.Deep.Dive-APoLLo
-   Everything is case sensitive, so use lowercase for db and table names
-   Check postgres sql version - `psql --version` or -V
-   See flag options - `psql --help`
-   If there's a "\#" in the prompt after logging into a db, then that signifies you are a super-user
-   Meta commands (i.e. commands once you're logged into the db)
    -   \\du - list roles (aka users + permissions)
    -   \\c <different db> - switches databases
    -   \\password <user name> - assign a password to a user (prompt will ask for the password twice)
        -   Can also use ALTER ROLE for this but the password will then be in the log
-   Start postgres db in docker
    -   Steps
        -   start docker desktop
        -   start powershell
        -   `docker run --name pg_database -p 5432:5432 -e POSTGRES_PASSWORD=ericb2022 -d postgres:latest`
            -   1st 5432 is local computer port
            -   2nd 5432 is the required postgres image port
            -   -e is for defining an environment variable; here its the db password that I set to ericb2022
            -   -d
                -   runs the container in the background
                -   allows you to run commands in the same terminal window that you used the container run command in
            -   "postgres:latest" is the name of the image to build the container from
        -   close powershell
        -   In docker desktop, the "pg_database" container should be running
-   Connect to the db
    -   Steps
        -   psql should be in your list of path environment variables
            -   right-click Start \>\> System \>\> advanced settings (right panel) \>\> environment variables \>\> highlight path \>\> edit
            -   "C:\\Program Files\\PostgreSQL\\14\\bin"
                -   \*\* Note the "14" in the path which is the current version. Therefore, when postgres is updated, this path will have to be updated \*\*
        -   `psql --host localhost --port 5432 --dbname postgres --username postgres`
            -   Note these are all default values, so this is equivalent to `psql -U postgres`
            -   \--host (-h) is the ip address or computer name that you want to connect to
                -   localhost is for the docker container that's running
            -   5432 is the default --port (-p) for a postgres container
            -   \--dbname (-d) is the name of the database on the server
                -   "postgres" is a db that ships with postgres
            -   \--username (-U) is a username that has permission to access the db
                -   "postgres" is the default super-user name
        -   A prompt will then ask you for that username's password
            -   The container above has the password ericb2022
                -   This didn't work for me, needed to use my postgres password that I set-up when I installed postgres and pgAdmin.
                -   My local postgres server and the container are listening on the same port, so maybe if I changed the first port number to something else, it would connect to the container.
        -   To exit db, `\q`
-   Create a db
    -   Steps
        -   `createdb -h localhost -p 5432 -U postgres -O eric two_trees`
            -   -U is the user account used to create the db
            -   -O is used to assign ownership to another user account
                -   "role" (i.e. user account) must already exist
            -   "two_trees" is the name of the new db
            -   You will be prompted for user's password
        -   List of dbs on the server
            -   `psql -h localhost -p 5432 -U postgres -l`
                -   -l lists all dbs on server
                -   You will be prompted for user's password
-   Run a sql script
    -   `psql -d acweb -f test.sql`
        -   -d is for the database name (e.g. acweb)
        -   -f is for running a file (e.g. test.sql)
-   Add users
    -   Create user/role (once inside db)

```         
CREATE USER <user name1>;
CREATE ROLE <user name2>;
ALTER ROLE <user name2> LOGIN
```

-   `CREATE USER` will give the user login attribute/permission while `CREATE ROLE` will not
    -   `ALTER ROLE` gives the user attributes/permissions (e.g. login permission)
-   Create user/role (at the CLI) - `createuser <user name>`

## pgAdmin  {#sec-db-pstgr-pgadm}

-   Create a server
    -   right-click on servers \>\> create \>\> server
        -   General tab \>\> enter name
        -   Connection tab
            -   Host name/address: computer name or ip address where the server is running
                -   local: localhost or 127.0.0.1
            -   Port: default = 5432
            -   Maintenance database: db you want to connect to
                -   if you haven't created it yet, just use default "postgres" which autmatically created during installation
            -   username/password
                -   u: default is postgres
                -   p: installation password
                -   tick Save password
        -   Click Save
-   Create a db
    -   right-click databases \>\> create \>\> databases \>\> enter name (lowercase) and click save
-   Create a table
    -   Via gui
        -   click db name \>\> schema \>\> public \>\> right-click tables \>\> create \>\> tables
        -   general tab
            -   Enter the table name (lower case)
        -   columns tab
            -   enter name, data type, whether there should be a "Not Null" constraint, and whether it's a primary key
            -   Add additional column with "+" icon in upper right
            -   If you're going to fill the table with a .csv file, make sure the column names match
        -   Click save
        -   Table will be located at db name \>\> schema \>\> public \>\> tables
    -   Via sql
        -   Open query tool
            -   right-click <db name> or Schemas or Tables \>\> query tool
            -   Click Tools menu dropdown (navbar) \>\> query tool
        -   Run CREATE TABLE statement
            -   If you don't include the schema as part of the table name, pgadmin automatically places it into the "public" schema directory (e.g. public.table_name)
-   Import csv into an empty table
    -   make sure the column names match
    -   right-click table name \>\> import/export
    -   Options tab
        -   Make sure import is selected
        -   Select the file
        -   If you have column names in your csv, select Yes for Header
        -   Select "," for the Delimiter
    -   Columns tab
        -   Check to make sure all the column names are there
    -   Click OK
-   Query Table
    -   Right-click table \>\> query editor
    -   query editor tab
        -   type query \>\> click â–¶ to run query

## AWS RDS  {#sec-db-pstgr-rds}

-   Misc
    -   Notes from [Create an RDS Postgres Instance and connect with pgAdmin](https://www.youtube.com/watch?v=0GpQJM7w6M8)
-   Steps
    -   Search AWS services for "RDS" (top left navbar)
    -   Create Database
        -   Click "Create Database"
    -   Create Database
        -   Choose Standard create or Easy Create
            -   Easy Create - uses "best practices" settings
        -   Select postgres
            -   Also available: Amazon Aurora, MySQL, MariaDB, Oracle, Microsoft SQL Server
        -   Templates
            -   Production
                -   Multi-AZ Deployment - Multiple Availability Zones
                -   Provisioned IOPS Storage - Increased output
            -   Dev/Test
            -   free tier
                -   750 hrs of Amazon RDS in a Single-AZ db.t2.micro Instance.
                -   20 GB of General Purpose Storage (SSD).
                -   20 GB for automated backup storage and any user-initiated DB Snapshots.
            -   RDS pricing [page](http://aws.amazon.com/rds/pricing)
        -   Settings
            -   DB Instance Identifier - enter name
            -   Set master username, master username password
        -   DB Instance
            -   db.t3.micro or db.t4g.micro for free tier
                -   dev/test, production has many other options
        -   Storage
            -   defaults: SSD with 20GB
            -   autoscaling can up the storage capacity to a default 1000GB
