# Base R

TOC

* Misc
* Options
* Functions
* Pipe
* Conditionals
* Ordering Columns and Sorting Rows
* Subsetting
* Error Handling
* Models


Misc

* 



Options

* Remove scientific notation

```
options(scipen = 999)
```

* Wide and long printing tibbles

```
# in .Rprofile
makeActiveBinding(".wide", function() { print(.Last.value, width = Inf) }, .GlobalEnv)
```

* After a printed a tibble, and want to see it in wide I just type .wide + ENTER.
* Can have similar bindings for \`.long\` and \`.full\`.



Functions

* Anonymous (aka lambda) functions: `\(x) {}` (> R 4.1)

```
function(x) {
  x[which.max(x$mpg), ]
}

# equivalent to the above
\(x) {
  x[which.max(x$mpg), ]
}
```

* Magrittr + base

```
mtcars %>% {plot(.$hp, .$mpg){style='color: #990000'}[}]{style='color: #990000'}
mtcars %$% plot(hp, mpg)
```

* By wrapping the RHS in curly braces, we can override the rule where the LHS is passed to the first argument

* load all R scripts from a directory: `for (file in list.files("R", full.names = TRUE)) source(file)`
* Dots (...)
	* Misc
		* [{]{style='color: #990000'}[ellipsis](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTdJSFVLcnRGcGlMZzM5RlVRR25fV1BJdXJrUXxBQ3Jtc0tsUzdQR3lPaGdPTEQzc0FMRDFCaG9oZTN5MjluM2owTm8wbjRXbGdRTUhrcExrUlRiWk56bk1yLWp1dGVsSXRqT0RYdTMySGZLOE0yMFRkSHpMTzBHd21JLUhxWVVORUtLYy1rRVZHMElxRldjRHJqdw&q=https%3A%2F%2Fellipsis.r-lib.org%2F&v=oIMFZf5dUFA){style='color: #990000'}[}]{style='color: #990000'}: helper functions
		* [{rlang}]{style='color: #990000'} dynamic dots: [article](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkxlZk41V2RjNndZdXU5ZElqOGhUcnhJR01Md3xBQ3Jtc0ttMS1aekRNekdTc0h4Zk1KZGMtNkg2c2ZISk5DcjcwcXhVRTZianZORmppNDV2ZDE3bWNLNmtqNVA3eDFlMHNsdGYzWDlBZ2VQNHBBZGF1YWtZdWdJSmIzeHRtNVNDSmg5RGJhT1NCZTJFRXItcDhrZw&q=https%3A%2F%2Frlang.r-lib.org%2Freference%2Fdyn-dots.html&v=oIMFZf5dUFA)
			* Splice arguments saved in a list with the splice operator, `!!!` .
			* Inject names with glue syntax on the left-hand side of `:=` .
	* user defined functions

```
moose <- function(...) {
    dots <- list(...)
    dots_names <- names(dots)
    if (is.null(dots_names) || "" %in% dots_names {
        stop("All arguments must be named")
    }
}
```

* Subset dots values

```
add2 <- function(...) {
    ..1 + ..2
}
add2(3, 0.14)
# 3.14
```

* Subset dots dynamically: `...elt(n)`
	* Set a value to n and get back the value of that argument
* Number of arguments in ... : `...length()`



Pipe
![](./_resources/Base_R.resources/image.png)

* Benefits of base pipe
	* Magrittr pipe is bloated with special features which may make it slower than the base pipe
	* If not using tidyverse, it's one less dependency (maybe one day it will be deprecated in tidyverse)
* Base pipe with base and anonymous functions

```
# verbosely
mtcars |> (function(.) plot(.$hp, .$mpg))()
# using the anonymous function shortcut, emulating the dot syntax
mtcars |> (\(.) plot(.$hp, .$mpg))()
# or if you prefer x to .
mtcars |> (\(x) plot(x$hp, x$mpg))()
# or if you prefer to be explicit with argument names
mtcars |> (\(data) plot(data$hp, data$mpg))()
```

* Using "\_" placeholder:
	* `mtcars |> lm(mpg ~ disp, data = _)`
	* `mtcars |> lm(mpg ~ disp, data = _) |> _$coef`
* Base pipe .\[ \]  hack

```
wiki |> 
  read_html() |> 
  html_nodes("table") |> 
  (\(.) .[[2]])() |> 
  html_table(fill = TRUE) |> 
  clean_names()
# instead of
djia <- wiki %>% 
  read_html() %>% 
  html_nodes("table") %>% 
  .[[2]] %>% 
  html_table(fill = TRUE) %>% 
  clean_names()
```

* Magrittr, base pipe differences
	* magrittr: %>% allows you change the placement with a . placeholder.
		* base: R 4.2.0 added a \_ placeholder to the base pipe, with one additional restriction: the argument has to be named
	* magrittr: With %>% you can use . on the left-hand side of operators like $, \[\[, \[ and use in multiple arguments (e.g. df %>% {split(.$x, .$y){style='color: #990000'}[}]{style='color: #990000'})
		* base: can hack this by using anonymous function
			* see Base pipe with base and anonymous functions above
			* see Base pipe .\[ \]  hack above
	* magrittr: %>% allows you to drop the parentheses when calling a function with no other arguments (e.g. dat %>% distinct)
		* base: |> always requires the parentheses. (e.g. dat |> distinct())
	* magrittr: %>% allows you to start a pipe with . to create a function rather than immediately executing the pipe
* Purrr with base pipe

```
data_list |> 
  map(\(x) clean_names(x))
# instead of
data_list %>%
  map( ~.x %>% clean_names)

# with split
star |> 
  split(~variable) |> 
  map_df(\(.) hedg_g(., reading ~ value), .id = "variable")
# instead of
star %>%
  split(.$variable) %>%
  map_df(. %>% hedg_g(., reading ~ value), .id = "variable")
```



Conditionals

* && and || are intended for use _solely_ with scalars, they return a single logical value.
	* Since they always return a scalar logical, you should use && and || in your if/while conditional expressions (when needed). If an & or | is used, you may end up with a non-scalar vector inside if (...) {} and R will throw an error.
* & and | work with multivalued vectors, they return a vector whose length matches their input arguments.
* `stopifnot`

```
pred_fn <- function(steps_forward, newdata) {
  stopifnot(steps_forward >= 1)
  stopifnot(nrow(newdata) == 1)
  model_f = model_map[[steps_forward]]
  # apply the model to the last "before the test period" row to get
  # the k-steps_forward prediction
  as.numeric(predict(model_f, newdata = newdata))
}
```


Ordering Columns and Sorting Rows

* Ascending: `df[with(df, order(value)), ]`
	* "value" is the column used to sort the df by
* Descending: `df[with(df, order(-value)), ]`
* By Multiple Columns
	* Descending then Ascending: `df[with(df, order(-value, id)), ]`
* Change position of columns

```
# Reorder column by index manually
df2 <- df[, c(5, 1, 4, 2, 3)]
df3 <- df[, c(1, 5, 2:4)]


# Reorder column by name manually
new_order = c("emp_id","name","superior_emp_id","dept_id","dept_branch_id")
df2 <- df[, new_order]
```


Subsetting

* Remove specific Rows

```
df <- df[-c(25, 3, 62), ]
```

* Remove column by name

```
df <- df[, which(names(df) == "col_name")]
df <- subset(df, select = -c(col_name))
df <- df[, !names(df) %in% c("col1", "col2"), drop = FALSE]
```

* Filter and Select

```
df <- subset(df, subset = col1 > 56, select = c(col2, col3))
```


Error Handling

* `try`
	* If something errors, then do something else
	* Example

```
current <- try(remDr$findElement(using = "xpath",
                                '//*[contains(concat( " ", @class, " " ),
                                concat( " ", "product-price-value", " " ))]'),
                                silent = T)

#If error : current price is NA 
if(class(current) =='try-error'){
    currentp[i] <- NA
} else {
    # do stuff
}
```

* `tryCatch`
	* Run the main code, but if it “catches” an error, then the secondary code (the workaround) will run.

```
pct_difference_error_handling <- function(n1, n2) {

# Try the main code
  tryCatch(pct_diff <- (n1-n2)/n1,

        # If you find an error, use this code instead
          error = return(
            cat( 'The difference between', as.integer(n1), 'and', as.integer(n2), 'is', 
                  (as.integer(n1)-as.integer(n2)), 'which is', 
                  100*(as.integer(n1)-as.integer(n2))/as.integer(n1),
                  '% of', n1 )#cat 
            ),
          # finally = print('Code ended') # optional

          )#trycatch

  # If no error happens, return this statement
  return ( cat('The difference between', n1, 'and', n2, 'is', n1-n2,
              ', which is', pct_diff*100, '% of', n1) )
}
```

* Assumes the error will be the user enters a string instead of a numeric. If errors, converts string to numeric and calcs.
* "finally" - This argument will always run, regardless if the try block raises an error or not. So it could be a completion message or a summary, for example.



Models

* Data from Model Object
	* `model$model` return the data dataframe
	* `deparse(model$call$data)` gives you that name of your data object as a string.
		* `model$call$data` gives you the data as an unevaluated symbol;
	* `eval(model$call$data)` gives you back the original data object, if it is available in the current environment.












