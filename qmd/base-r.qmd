# Base R {#sec-baser .unnumbered}

## Misc {#sec-baser-misc .unnumbered}

-   Magrittr + base

    ``` r
    mtcars %>% {plot(.$hp, .$mpg)}
    mtcars %$% plot(hp, mpg)
    ```

    -   By wrapping the RHS in curly braces, we can override the rule where the LHS is passed to the first argument \## Options {#sec-baser-opts .unnumbered}

-   Remove scientific notation

    ``` r
    options(scipen = 999)
    ```

-   Wide and long printing tibbles

    ``` r
    # in .Rprofile
    makeActiveBinding(".wide", function() { print(.Last.value, width = Inf) }, .GlobalEnv)
    ```

    -   After printing a tibble, if you want to see it in wide, then just type .wide + ENTER.
    -   Can have similar bindings for \`.long\` and \`.full\`.

## User Defined Functions {#sec-baser-usrfuns .unnumbered}

-   Anonymous (aka lambda) functions: `\(x) {}` (\> R 4.1)

    ``` r
    function(x) {
      x[which.max(x$mpg), ]
    }
    # equivalent to the above
    \(x) {
      x[which.max(x$mpg), ]
    }
    ```

-   Dots (...)

    -   Misc

        -   [{]{style="color: #990000"}[ellipsis](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTdJSFVLcnRGcGlMZzM5RlVRR25fV1BJdXJrUXxBQ3Jtc0tsUzdQR3lPaGdPTEQzc0FMRDFCaG9oZTN5MjluM2owTm8wbjRXbGdRTUhrcExrUlRiWk56bk1yLWp1dGVsSXRqT0RYdTMySGZLOE0yMFRkSHpMTzBHd21JLUhxWVVORUtLYy1rRVZHMElxRldjRHJqdw&q=https%3A%2F%2Fellipsis.r-lib.org%2F&v=oIMFZf5dUFA){style="color: #990000"}[}]{style="color: #990000"}: helper functions
        -   [{rlang}]{style="color: #990000"} dynamic dots: [article](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkxlZk41V2RjNndZdXU5ZElqOGhUcnhJR01Md3xBQ3Jtc0ttMS1aekRNekdTc0h4Zk1KZGMtNkg2c2ZISk5DcjcwcXhVRTZianZORmppNDV2ZDE3bWNLNmtqNVA3eDFlMHNsdGYzWDlBZ2VQNHBBZGF1YWtZdWdJSmIzeHRtNVNDSmg5RGJhT1NCZTJFRXItcDhrZw&q=https%3A%2F%2Frlang.r-lib.org%2Freference%2Fdyn-dots.html&v=oIMFZf5dUFA)
            -   Splice arguments saved in a list with the splice operator, `!!!` .
            -   Inject names with glue syntax on the left-hand side of `:=` .

    -   user defined functions

        ``` r
        moose <- function(...) {
            dots <- list(...)
            dots_names <- names(dots)
            if (is.null(dots_names) || "" %in% dots_names {
                stop("All arguments must be named")
            }
        }
        ```

    -   Subset dots values

        ``` r
        add2 <- function(...) {
            ..1 + ..2
        }
        add2(3, 0.14)
        # 3.14
        ```

    -   Subset dots dynamically: `...elt(n)`

        -   Set a value to n and get back the value of that argument

    -   Number of arguments in ... : `...length()`

## Functions {#sec-baser-funs .unnumbered}

-   `do.call` - allows you to call other functions by constructing the function call as a list

    -   Args
        -   what -- Either a function or a non-empty character string naming the function to be called
        -   args -- A list of arguments to the function call. The names attribute of args gives the argument names
        -   quote -- A logical value indicating whether to quote the arguments
        -   envir -- An environment within which to evaluate the call. This will be most useful if what is a character string and the arguments are symbols or quoted expressions
    -   [Example]{.ribbon-highlight}: Apply function to list of vectors
        
        ```r
        vectors <- list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
        combined_matrix <- do.call(rbind, vectors)
        
        combined_matrix
        ##      [,1] [,2] [,3]
        ## [1,]    1    2    3
        ## [2,]    4    5    6
        ## [3,]    7    8    9
        ```
    
    -   [Example]{.ribbon-highlight}: Apply multiple functions
    
        ```r
        data_frames <- list(
          data.frame(a = 1:3), 
          data.frame(a = 4:6), 
          data.frame(a = 7:9)
          )
        mean_results <- do.call(
          rbind, 
          lapply(data_frames, function(df) mean(df$a))
          )

        mean_results
        ##      [,1]
        ## [1,]    2
        ## [2,]    5
        ## [3,]    8
        ```

        -   First the mean is calculated for column a of each df using `lapply`
            - `lapply` is supplying the data for `do.call` in the required format, which is a list or character vector.
        -   Second the results are combined into a matrix with `rbind` 

-   `sink` - used to divert R output to an external connection.

    -   Use Cases: exporting data to a file, logging R output, or debugging R code.

    -   Args

        -   file: The name of the file to which R output will be diverted. If file is NULL, then R output will be diverted to the console.
        -   append: A logical value indicating whether R output should be appended to the file (TRUE) or overwritten (FALSE). The default value is FALSE.
        -   type: A character string. Either the output stream or the messages stream. The name will be partially match so can be abbreviated.
        -   split: logical: if TRUE, output will be sent to the new sink and the current output stream, like the Unix program tee.

    -   [Example]{.ribbon-highlight}: Logging output of code to file

        ``` r
        sink("r_output.log")      # Redirect output to this file
        # Your R code goes here
        sink()                    # Turn off redirection
        ```

        -   output file could also have an extension like ".txt"

    -   [Example]{.ribbon-highlight}: Debugging

        ``` r
        sink("my_function.log")   # Redirect output to this file
        my_function()
        sink()                    # Turn off redirection
        ```

    -   [Example]{.ribbon-highlight}: Appending output to a file

        ``` r
        sink("output.txt", append = TRUE)  # Append output to the existing file
        cat("Additional text\n")  # Append custom text
        plain text
        sink()  # Turn off redirection
        ```

## Pipe {#sec-baser-pipe .unnumbered}

![](./_resources/Base_R.resources/image.png)

-   Benefits of base pipe

    -   Magrittr pipe is bloated with special features which may make it slower than the base pipe
    -   If not using tidyverse, it's one less dependency (maybe one day it will be deprecated in tidyverse)

-   Base pipe with base and anonymous functions

    ``` r
    # verbosely
    mtcars |> (function(.) plot(.$hp, .$mpg))()
    # using the anonymous function shortcut, emulating the dot syntax
    mtcars |> (\(.) plot(.$hp, .$mpg))()
    # or if you prefer x to .
    mtcars |> (\(x) plot(x$hp, x$mpg))()
    # or if you prefer to be explicit with argument names
    mtcars |> (\(data) plot(data$hp, data$mpg))()
    ```

-   Using "\_" placeholder:

    -   `mtcars |> lm(mpg ~ disp, data = _)`
    -   `mtcars |> lm(mpg ~ disp, data = _) |> _$coef`

-   Base pipe .\[ \]  hack

    ``` r
    wiki |>
      read_html() |>
      html_nodes("table") |>
      (\(.) .[[2]])() |>
      html_table(fill = TRUE) |>
      clean_names()
    # instead of
    djia <- wiki %>%
      read_html() %>%
      html_nodes("table") %>%
      .[[2]] %>%
      html_table(fill = TRUE) %>%
      clean_names()
    ```

-   Magrittr, base pipe differences

    -   magrittr: %\>% allows you change the placement with a . placeholder.
        -   base: R 4.2.0 added a \_ placeholder to the base pipe, with one additional restriction: the argument has to be named
    -   magrittr: With %\>% you can use . on the left-hand side of operators like "$", \[\[, \[ and use in multiple arguments (e.g. df %>% {split(.$x, .\$y))
        -   base: can hack this by using anonymous function
            -   see Base pipe with base and anonymous functions above
            -   see Base pipe .\[ \]  hack above
    -   magrittr: %\>% allows you to drop the parentheses when calling a function with no other arguments (e.g. dat %\>% distinct)
        -   base: \|\> always requires the parentheses. (e.g. dat \|\> distinct())
    -   magrittr: %\>% allows you to start a pipe with . to create a function rather than immediately executing the pipe

-   Purrr with base pipe

    ``` r
    data_list |>
      map(\(x) clean_names(x))
    # instead of
    data_list %>%
      map( ~.x %>% clean_names)
    # with split
    star |>
      split(~variable) |>
      map_df(\(.) hedg_g(., reading ~ value), .id = "variable")
    # instead of
    star %>%
      split(.$variable) %>%
      map_df(. %>% hedg_g(., reading ~ value), .id = "variable")
    ```

## Conditionals {#sec-baser-cond .unnumbered}

-   && and \|\| are intended for use *solely* with scalars, they return a single logical value.

    -   Since they always return a scalar logical, you should use && and \|\| in your if/while conditional expressions (when needed). If an & or \| is used, you may end up with a non-scalar vector inside if (...) {} and R will throw an error.

-   & and \| work with multivalued vectors, they return a vector whose length matches their input arguments.

-   `stopifnot`

    ``` r
    pred_fn <- function(steps_forward, newdata) {
      stopifnot(steps_forward >= 1)
      stopifnot(nrow(newdata) == 1)
      model_f = model_map[[steps_forward]]
      # apply the model to the last "before the test period" row to get
      # the k-steps_forward prediction
      as.numeric(predict(model_f, newdata = newdata))
    }
    ```

## Ordering Columns and Sorting Rows {#sec-baser-sort .unnumbered}

-   Ascending: `df[with(df, order(value)), ]`

    -   "value" is the column used to sort the df by

-   Descending: `df[with(df, order(-value)), ]`

-   By Multiple Columns

    -   Descending then Ascending: `df[with(df, order(-value, id)), ]`

-   Change position of columns

    ``` r
    # Reorder column by index manually
    df2 <- df[, c(5, 1, 4, 2, 3)]
    df3 <- df[, c(1, 5, 2:4)]
    # Reorder column by name manually
    new_order = c("emp_id","name","superior_emp_id","dept_id","dept_branch_id")
    df2 <- df[, new_order]
    ```

## Subsetting {#sec-baser-subset .unnumbered}

-   Remove specific Rows

    ``` r
    df <- df[-c(25, 3, 62), ]
    ```

-   Remove column by name

    ``` r
    df <- df[, which(names(df) == "col_name")]
    df <- subset(df, select = -c(col_name))
    df <- df[, !names(df) %in% c("col1", "col2"), drop = FALSE]
    ```

-   Filter and Select

    ``` r
    df <- subset(df, subset = col1 > 56, select = c(col2, col3))
    ```

## Error Handling {#sec-baser-err .unnumbered}

-   `try`

    -   If something errors, then do something else
    -   Example

    ``` r
    current <- try(remDr$findElement(using = "xpath",
                                    '//*[contains(concat( " ", @class, " " ),
                                    concat( " ", "product-price-value", " " ))]'),
                                    silent = T)
    #If error : current price is NA
    if(class(current) =='try-error'){
        currentp[i] <- NA
    } else {
        # do stuff
    }
    ```

-   `tryCatch`

    -   Run the main code, but if it "catches" an error, then the secondary code (the workaround) will run.

    ``` r
    pct_difference_error_handling <- function(n1, n2) {
    # Try the main code
      tryCatch(pct_diff <- (n1-n2)/n1,
            # If you find an error, use this code instead
              error = return(
                cat( 'The difference between', as.integer(n1), 'and', as.integer(n2), 'is',
                      (as.integer(n1)-as.integer(n2)), 'which is',
                      100*(as.integer(n1)-as.integer(n2))/as.integer(n1),
                      '% of', n1 )#cat
                ),
              # finally = print('Code ended') # optional
              )#trycatch
      # If no error happens, return this statement
      return ( cat('The difference between', n1, 'and', n2, 'is', n1-n2,
                  ', which is', pct_diff*100, '% of', n1) )
    }
    ```

    -   Assumes the error will be the user enters a string instead of a numeric. If errors, converts string to numeric and calcs.
    -   "finally" - This argument will always run, regardless if the try block raises an error or not. So it could be a completion message or a summary, for example.

## Models {#sec-baser-mods .unnumbered}

-   Data from Model Object
    -   `model$model` return the data dataframe
    -   `deparse(model$call$data)` gives you that name of your data object as a string.
        -   `model$call$data` gives you the data as an unevaluated symbol;
    -   `eval(model$call$data)` gives you back the original data object, if it is available in the current environment.
