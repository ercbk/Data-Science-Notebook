# Spreadsheets {#sec-spdsht .unnumbered}

## Misc {#sec-spdsht-misc .unnumbered}

-   Packages

    -   [{]{style="color: #990000"}[readxl](https://readxl.tidyverse.org/){style="color: #990000"}[}]{style="color: #990000"}
        -   Read: `read_excel("your_file.xlsx", range = "C1:E4", sheet = "sheet_name", n_max = 3)`
        -   Doesn't used Java, like [{]{style="color: #990000"}[xlsx](https://github.com/colearendt/xlsx){style="color: #990000"}[}]{style="color: #990000"}, which can be a pain if you don't have the correct Java runtime installed. Although there's [{rJavaEnv}]{style="color: #990000"} now to help that. (see [Misc \>\> R](misc.qmd#sec-misc-r){style="color: green"})
    -   [{]{style="color: #990000"}[openxlsx2](https://janmarvin.github.io/openxlsx2/){style="color: #990000"}[}]{style="color: #990000"} - A modern reinterpretation of [{openxlsx}]{style="color: #990000"}
    -   [{]{style="color: #990000"}[openxlsx2Extras](https://elipousson.github.io/openxlsx2Extras/){style="color: #990000"}[}]{style="color: #990000"} - Contains wrappers than extend features and convenience functions
    -   [{pandas}]{style="color: goldenrod"}
        -   Read: `pd.read_excel('your_file.xlsx, skiprows = 7, usecols = 'C:D')`
    -   [{]{style="color: #990000"}[tidyxl](https://nacnudus.github.io/tidyxl/){style="color: #990000"}[}]{style="color: #990000"} - Imports non-tabular data from Excel files into R. It exposes cell content, position, formatting and comments in a tidy structure for further manipulation, especially by the unpivotr package.
    -   [{]{style="color: #990000"}[unpivotr](https://nacnudus.github.io/unpivotr/){style="color: #990000"}[}]{style="color: #990000"} - Cleans nasty, formatted excel spreadsheets with such characteristics as:
        -   Multi-headered hydra
        -   Meaningful formatting
        -   Headers anywhere but at the top of each column
        -   Non-text headers e.g. dates
        -   Other stuff around the table
        -   Several similar tables in one sheet
        -   Sentinel values
        -   Superscript symbols
        -   Meaningful comments
        -   Nested HTML tables

-   Resources

    -   [Spreadsheet Munging Strategies](https://nacnudus.github.io/spreadsheet-munging-strategies/)

-   Cheatsheet\
    ![](_resources/Spreadsheets.resources/excel-cheatsheet-1.jpg){.lightbox}

## Operations {#sec-spdsht-ops .unnumbered}

-   Some Excel files are binaries and in order to use `download.file`, you must set [mode = "wb"]{.arg-text}

    ``` r
    download.file(url, 
                  destfile = glue("{rprojroot::find_rstudio_root_file()}/data/cases-age.xlsx"), 
                  mode = "wb")
    ```

-   Create workbook from labelled columns ([source](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/))\
    ![](_resources/Spreadsheets.resources/labelled_columns-1.png){.lightbox width="532"}

    ``` r
    # devtools::install_github("pcctc/croquet")
    library(croquet)
    library(openxlsx)

    wb <- createWorkbook() |> 
      add_labelled_sheet(penguins_labelled)

    saveWorkbook(wb, "penguins_labelled.xlsx")
    ```

    -   Also see [R, Snippets \>\> Cleaning](r-snippets.qmd#sec-r-snippets-cleaning){style="color: green"} \>\> Create labelled columns

-   Save and view spreadsheet ([Thread](https://fosstodon.org/@kdm9@genomic.social/113129034469639913))

    ``` r
    kview = function(df) {
      # fn <- paste0(tempfile(), ".tsv")
      # write_tsv(df,
      #           fn,
      #           na = "")
      # system(sprintf("libreoffice --calc %s", fn))

      # fn <- paste0(tempfile(), ".csv")
      # write.csv(x = x, file = fn)
      # fs::file_show(fn)

      fn <- paste0(tempfile(), ".xlsx")
      writexl::write_xlsx(df, fn)
      system(sprintf("wslview %s", fn))
    }
    ```

-   Export dataframes as multiple tabs in a spreadsheet ([source](https://bsky.app/profile/cghlewis.bsky.social/post/3lmtumkdfis2i))

    ``` r
    shts_school <- 
      list(
        school_a = df_a_sch,
        school_b = df_b_sch,
        school_c = df_c_sch
      )
    openxlsx::write.xlsx(shts_school, file = "school-results.xlsx")
    ```

## Catastrophes {#sec-spdsht-cats .unnumbered}

-   Industry [studies](https://www.igi-global.com/article/know-spreadsheet-errors/55750) show that 90 percent of spreadsheets containing more than 150 rows have at least one major mistake.
-   Releasing confidential information
    -   Irish police accidently handed out officers private information when sharing sheets with statistics due to a freedom of information request. ([link](https://arstechnica.com/science/2024/01/we-keep-making-the-same-mistakes-with-spreadsheets-despite-bad-consequences/?utm_brand=arstechnica&utm_social-type=owned&utm_source=mastodon&utm_medium=social))
-   Errors when combining sheets
    -   Wales dismissed anaesthesiologists after mistakenly deeming them "unappointable." Spreadsheets from different areas lacked standardization in formatting, naming conventions, and overall structure. To make matters worse, data was manually copied and pasted between various spreadsheets, a time-consuming and error-prone process. ([link](https://arstechnica.com/science/2024/01/we-keep-making-the-same-mistakes-with-spreadsheets-despite-bad-consequences/?utm_brand=arstechnica&utm_social-type=owned&utm_source=mastodon&utm_medium=social))
    -   When consolidating assets from different spreadsheets, the spreadsheet data was not “cleaned” and formatted properly. The Icelandic bank’s shares were subsequently undervalued by as much as £16 million. ([link](https://arstechnica.com/science/2024/01/we-keep-making-the-same-mistakes-with-spreadsheets-despite-bad-consequences/?utm_brand=arstechnica&utm_social-type=owned&utm_source=mastodon&utm_medium=social))
-   Data entry errors
    -   Cryto.com accidentally transferred \$10.5 million instead of \$100 into the account of an Australian customer due to an incorrect number being entered on a spreadsheet. ([link](https://arstechnica.com/science/2024/01/we-keep-making-the-same-mistakes-with-spreadsheets-despite-bad-consequences/?utm_brand=arstechnica&utm_social-type=owned&utm_source=mastodon&utm_medium=social))
    -   Norway’s \$1.5tn sovereign wealth fund lost \$92M, on an error relating to how it calculated its mandated benchmark. A person used the wrong date, December 1st instead of November 1st. ([link](https://www.ft.com/content/db864323-5b68-402b-8aa5-5c53a309acf1))

## Best Practices {#sec-spdsht-bprac .unnumbered}

-   [Better Spreadsheets](https://better-spreadsheets.netlify.app/) - Workshop materials covering Woo and Broman paper
-   [Data organization in spreadsheets](https://peerj.com/preprints/3183/) (Woo and Broman
    -   Be consistent
    -   Write dates like YYYY-MM-DD
    -   Don't leave any cells empty
    -   Put just one thing in a cell
    -   Organize the data as a single rectangle (with subjects as rows and variables as columns, and with a single header row)
    -   Create a data dictionary
    -   Don't include calculations in the raw data files
    -   Don't use font color or highlighting as data
    -   Choose good names for things
    -   Make backups
    -   Use data validation to avoid data entry errors
    -   Save the data in plain text files.
-   [Tips for data entry in Excel](https://cghlewis.com/blog/excel_entry/)
    -   Adding data validation to improve data quality
        -   Excel has data validation?!
    -   Using forms to improve data entry security
    -   Linking information across sheets to reduce redundancy
        -   Uses XLOOKUP to emulate primary/foreign key functionality in relational databases
    -   Double data entry to reduce errors
        -   A designated team member creates two identical entry forms. One person enters forms in the first entry screen, a different person enters forms in the second entry screen.
-   [Eleven quick tips for properly handling tabular data](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1012604)
    -   Dos and Don'ts\
        ![](_resources/Spreadsheets.resources/best-prac-11tips-dos-donts-1.png){.lightbox width="532"}
    -   Data Validation\
        ![](_resources/Spreadsheets.resources/best-prac-11tips-quality-1.png){.lightbox width="532"}

## Transitioning from Spreadsheet to DB {#sec-spdsht-transspr}

-   Misc
    -   When you start to have multiple datasets or when you want to make use of several columns in one table and other columns in another table you should consider going the local database route.
    -   Use db "normalization" to figure out a schema
    -   Also see
        -   [Databases, Normalization](db-normalization.qmd#sec-db-norm){style="color:green"}
        -   [Databases, Warehouses \>\> Design a Warehouse](db-warehouses.qmd#sec-db-ware-dsgn){style="color: green"}
-   DB advantages over spreadsheets:
    -   Efficient analysis: Relational databases allow information to be retrieved quicker to then be analyzed with SQL (Structured Query Language), to then run queries.
        -   Once spreadsheets get large, they can lag or freeze when opening, editing, or performing simple analyses in them.
    -   Centralized data management: Since relational databases often require a certain type or format of data to be input into each column of a table, it's less likely that you'll end up with duplicate or inconsistent data.
    -   Scalability: If your business is experiencing high growth, this means that the database will expand, and a relational database can accommodate an increased volume of data.
-   Start documenting the spreadsheets
    -   File Names, File Paths
    -   Understand where values are coming from
        -   Source (e.g. department, store, sensor), Owner
    -   How rows of data are being generated
        -   Who/What is inputting the data
    -   How does each spreadsheet/notebooks/set of spreadsheets fit in the company's business model
        -   How are they being used and by whom
    -   Map the spreadsheets relationships to one another
        -   See [Databases, Warehouses \>\> Design a Warehouse](db-warehouses.qmd#sec-db-ware-dsgn){style="color: green"}
