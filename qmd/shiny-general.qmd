# General

## Resources

-   RStudio <https://shiny.rstudio.com/tutorial/>
    -   Modules <https://shiny.rstudio.com/articles/modules.html>
    -   Beginner <https://rstudio-education.github.io/shiny-course/>
-   Hadley ebook <https://mastering-shiny.org/>
-   [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) - [{golem}]{style="color: #990000"} book
-   Adv. UI ebook <https://unleash-shiny.rinterface.com/>
-   Simple app packaged, modules, etc.
    -   <https://github.com/2DegreesInvesting/scenarioSelector#learning-shiny>
-   Examples and templates for various usecases ([link](https://github.com/elkronos/shiny_examples))

## Misc

-   A common source of poor Shiny performance and maintainability is placing a large amount of logic within a single reactive statement such as an observe()
    -   Instead of adding a bunch of renderPlots to an observe(), liberally use reactive variables and your code becomes much cleaner, faster, and more maintainable
-   Comparison with other products ([article](https://www.appsilon.com/post/rshiny-vs-powerbi-vs-spotfire?utm_source=social&utm_medium=mastodon&utm_campaign=blog&utm_term=appsilon-account&utm_content=data-visualization))\
    ![](_resources/Shiny-General.resources/comp-shiny-powerbi-spotfire-1.png){.lightbox width="532"}
-   General Workflow (Dancho)
    1.  Simple App
        -   Something bare bones that has ui and server sections
        -   Could be a company or personal template or the "Hello, World" app with slider and text output
    2.  Better App
        -   Add images (e.g. navbar logo, splash page background)
        -   Adjust layout (add sidebar, main panel, etc. to UI)
        -   Add blank cards (pill, tab, etc.) which will later be filled with charts, tables, etc.
        -   Titles (navbar, side bar, main panel, etc.)
        -   Use Bootstrap 5 and style.css files (style navbar, titles, etc.)
    3.  Placeholder App
        -   Integrate analysis into the app
        -   Make cards look professional
        -   Use widgets to make interactive visualizations (charts, tables)
    4.  Reactive App
        -   Make all calculations and events reactive
            -   i.e user input changes output (e.g. data values/calculations that go into the charts, tables, etc.)
        -   This is the basic working application
    5.  Final Product
        -   Feature examples
            -   Add full data ingestion
            -   Add search
            -   Add additional inputs and calculations (i.e. more analysis)
        -   Create modular code (utils directory)
            -   Code gets long for more complicated apps. Modularizing it makes it more readable and easier to maintain
        -   Make output downloadable into a report
-   `options(shiny.autoreload = TRUE)` before running `shiny::runApp(appDir = "./tests", port = 8080)` allows you to make changes to app.R and view them almost instantaeously in the viewer. ([link](https://mstdn.social/@ramikrispin/111631209092613469))

## Design

-   Misc
    -   packages
        -   [{designer}]{style="color: #990000"} - makes the initial generation of a UI wireframe of a shiny application as quick and simple as possible. Good for PoCs. Allows you to drag and drop components.
        -   {shinyuieditor} - seems like it's similar to [{designer}]{style="color: #990000"}
            -   Also see BizSci video
    -   **Semantic Layer** - A  business representation of corporate data that helps end users access data autonomously using common business terms. By using common business terms, rather than data language, to access, manipulate, and organize information, a semantic layer simplifies the complexity of business data. Business terms are stored as objects in a semantic layer, which are accessed through business views
    -   ask for feedback on each stage and implement changes accordingly
    -   Infinite Scrolling vs Pagination ([article with code](https://www.r-bloggers.com/2022/11/infinite-scrolling-in-r-shiny/))
        -   Infinite scrolling is easier to use on mobile devices and requires fewer "clicks" compared to pagination.
            -   Might increase user engagement on your page as viewers stay on your website longer; continuously searching for relevant content when they have no particular goal in mind.
-   Map the user's workflow
    -   Why?
        -   Seeing how the users accomplish the task now will give you a better understanding of the whole process or even point to a competitive advantage.
        -   Maybe the existing tools have some inefficiencies that your app can address?
        -   Or maybe some parts of the current solution can be reused to speed up user adoption and onboarding?
    -   Questions
        -   What is the main reason for building the app?
        -   Who are the users?
        -   What will the users accomplish with your app? What are their business goals?
        -   How have they done it so far? Are they already used to any particular tools or workflows?
-   For Analysis apps
    -   include at least a few toy datasets so people know what the data is supposed to look like and be able to play around with the app
        -   add a description card for each toy data set
    -   add tool-tips for input ui text
    -   add descriptions/instructions to the top of each page
-   Apps are for users (not you)
    -   What decision does the user make by visiting this app?
    -   What does the user learn?
    -   How do they interact with your app to do this?
-   Data visualizations
    -   What do you want to tell with the data?
    -   What is the context?
    -   Who is your audience?

## Testing

-   Can test at any stage of the development process, even before it starts.
    -   You can use the wireframes or mockups and manually change the "screens" as the user "performs an action" in the app.
-   \*\*Do not to leave testing for the last moment. When the app development is finished, rebuilding the UI will be costly.\*\*
-   Types
    -   unit tests
    -   performance tests
    -   in-depth user interviews
        -   Sessions with the user where you ask the person to perform several tasks within the tool. This way you can see if there are any recurring problems with navigation or the general ease of use.
    -   hallway tests
        -   Short version of an in-depth user interview
        -   Just ask your colleagues to use the app for 5-10 minutes and note their impressions.
-   Final Checklist
    -   Is the app design responsive?
    -   Does the user know what's wrong when receiving an error message?
    -   Is the user well informed about the state of the app, e.g. when waiting for the calculation, is it clear when it will be finished?

## JS

-   `www` - directiory for images, styles, or JS script. Same directory as app.R
-   Use a javascript file + library
    -   [Example]{.ribbon-highlight} stylish pop-up notification

        ``` r
        # Shiny App                                            // JS script; basic toastify notification
                                                              Shiny.addCustomMessageHandler('notify', function(msg){
        ui <- fluidPage(                                            Toastify({
          tags$head(                                                  text: msg
            # toastify css dependency                              }).showToast();
            tags$link(                                        });
              rel = "stylesheet",
              type = "text/css",
              href = "https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
            ),
            # our script
            tags$script(
              type = "text/javascript",
              src = "script.js"
            )
          ),
          h1("Notifications"),
          textInput("text", "Text"),
          actionButton("show", "Show"),
          # toastify js dependency
          tags$script(
            type = "text/javascript",
            src = "https://cdn.jsdelivr.net/npm/toastify-js"
          )
        )
        server <- function(input, output, session){
          observeEvent(input$show, {
            session$sendCustomMessage(
              "notify",
              input$text
          })
        }
        shinyApp(ui, server)
        ```
-   [toastify.js](https://github.com/apvarun/toastify-js/blob/master/README.md) is a library for some snazzy notifications you can use that pop-up in your browser when a event (e.g. button pushed) has happened.
-   Button is pressed in ui, sends "message" (text, data.frame, etc.) to server, server sends "message" to js script in ui which triggers a notification in the browser.
-   UI
    -   tags$head includes: * tags$link links to the toastify CSS stylesheet
        -   tags\$script points to the path of the js script and provides the identifier ("type"), "text/javascript"
    -   tags\$script links to the toastify js dependency and also has the identifier, "text/javascript"
-   Server
    -   `ObserveEvent`  listens for ui input "show" button to be pressed
    -   `sendCustomMessage`  is a js function to send a message from the server to the browser
        -   identifier ("type") = "notify" says which custom handler to use in the js script
-   js script
    -   `addCustomMessageHandler`  is a js function that receives the message from the server
        -   "notify" is the identifer that it listens for
        -   `Toastify()`  takes a JSON formatted list of args
        -   `showToast`  method sends snazzy notification to the user's browser.
