# APIs {#sec-apis .unnumbered}

## Misc {#sec-apis-misc .unnumbered}

-   Definition\
    ![](./_resources/APIs.resources/image.1.png){.lightbox width="380"}
-   REST API\
    ![](./_resources/APIs.resources/image.2.png){.lightbox width="380"}
-   Design questions
    -   Should the API receive the entire datapoint (e.g sensitve customer info) or just an ID for you to query in a database itself?
    -   Where should the model be loaded from? Disk? Cloud? (see [Production, Deployment \>\> Model Deployment Strategies](production-deployment.qmd#sec-prod-deploy-moddepl){style="color: green"})
    -   What diagnostic output should be returned along with result?
-   Use CI/CD to unit test, rebuild, and deploy the API every time there's a push a commit to the production branch of your repo.
-   Best Practices [Thread](https://twitter.com/mmartin_joo/status/1653761916324421633)
    -   Versioning
    -   IDs vs UUIDs
    -   Nested resources
    -   JSON API
    -   Let the client decide what it wants
-   Important to create unit tests to use before code goes into production
    -   Test all endpoints
    -   Check data types
    -   [{testthat}]{style="color: #990000"}
        -   Example

            ``` r
            library(testthat)
            source("rest_controller.R")
            testthat("output is a probability", {
                input <- list(id = 123, name = "Ralph")
                result <- make_prediction(input)
                expect_gte(result, 0)
                expect_lte(result, 1)
            })
            ```
-   The only difference here between GET and POST is that you can't put parameters and their values in the URL for POST. The parameters and values are passed in the request body as JSON.
    -   GET is a request for data from a server POST sends data to a server and also can receive data.
-   An IO-bound task spends most of its time waiting for IO responses, which can be responses from webpages, databases, or disks. For web development where a request needs to fetch data from APIs or databases, it's an IO-bound task and concurrency can be achieved with either *threading* or *async/await* to minimize the waiting time from external resources.

## Terms {#sec-apis-terms .unnumbered}

-   [**Async/Await**]{style="color: #009499"} ---  Unlike threading where the OS has control, with this method, we can decide which part of the code can be awaited and thus control can be switched to run other parts of the code. The tasks need to cooperate and announce when the control will be switched out. And all this is done in a single thread with the `await` command. ([article](https://towardsdatascience.com/understand-async-await-with-asyncio-for-asynchronous-programming-in-python-e0bc4d25808e))
-   [**Threading**]{style="color: #009499"} --- Uses multiple threads and takes turns to run the code. It achieves concurrency with pre-emptive multitasking which means we cannot determine when to run which code in which thread. It's the operating system that determines which code should be run in which thread. The control can be switched at any point between threads by the operating system. This is why we often see random results with threading ([article](https://levelup.gitconnected.com/how-to-write-concurrent-python-code-with-multithreading-b24dec228c43))
-   [**Body**]{style="color: #009499"} --- information that is sent to the server. (Can't use with GET requests.)
-   [**Endpoint**]{style="color: #009499"} --- a part of the URL you visit. For example, the endpoint of the URL *https://example.com/predict* is */predict*
-   [**Headers**]{style="color: #009499"} --- used for providing information (think authentication credentials, for example). They are provided as key-value pairs
-   [**Method**]{style="color: #009499"} --- a type of request you're sending, can be either GET, POST, PUT, PATCH, and DELETE. They are used to perform one of these actions: Create, Read, Update, Delete (CRUD)

## Methods {#sec-apis-meth .unnumbered}

![](./_resources/APIs.resources/image.png){.lightbox width="472"}

-   Misc

    -   If you're writing a function or script, you should check whether the status code is in the 200s before additional code runs.

-   GET

    ``` r
    # example 1
    args <- list(key = "<key>", id = "<id>", format = "json", output = "full", count = "2")
    api_json <- GET(url = URL, query = args)

    # example 2 (with headers)
    res = GET("https://api.helium.io/v1/dc_burns/sum",
              query = list(min_time = "2020-07-27T00:00:00Z"
                          , max_time = "2021-07-27T00:00:00Z"),
              add_headers(`Accept`='application/json'
                          , `Connection`='keep-live'))

    # example 3
    get_book <- function(this_title, this_author = NA){
      httr::GET(
        url = url,
        query = list(
          apikey = Sys.getenv("ACCUWEATHER_KEY"),
          q = ifelse(
            is.na(this_author),
            glue::glue('intitle:{this_title}'),
            glue::glue('intitle:{this_title}+inauthor:{this_author}')
            )))
    }
    ```

-   POST

    ``` r
    # base_url from get_url above
    base_url <- "https://tableau.bi.iu.edu/"
    vizql <- dashsite_json$vizql_root
    session_id <- dashsite_json$sessionid
    sheet_id <- dashsite_json$sheetId

    post_url <- glue("{base_url}{vizql}/bootstrapSession/sessions/{session_id}")

    dash_api_output <- POST(post_url,
                            body = list(sheet_id = sheet_id),
                            encode = "form",
                            timeout(300))
    ```

-   [Example]{.ribbon-highlight}: Pull parsed json from raw format

    ``` r
    my_url <- paste0("http://dataservice.accuweather.com/forecasts/",
                      "v1/daily/1day/571_pc?apikey=", 
                     Sys.getenv("ACCUWEATHER_KEY"))
    my_raw_result <- httr::GET(my_url)

    my_content <- httr::content(my_raw_result, as = 'text')

    dplyr::glimpse(my_content) #get a sense of the structure
    dat <- jsonlite::fromJSON(my_content)
    ```

    -   `content` has 3 option for extracting and converting the content of the GET output.

        -   "raw" output asis

        -   "text" can be easiest to work with for nested json

        -   "parsed" is a list

-   [Example]{.ribbon-highlight}: json body\
    ![](./_resources/APIs.resources/FPD2qFPXoAMum8Y.png){.lightbox width="321"}\
    ![](./_resources/APIs.resources/FPD41PEWYAAM_cx.png){.lightbox width="205"}

    -   From [thread](https://twitter.com/BenjaminWolfe/status/1508984458350936070)
    -   "use auto_unbox = TRUE; otherwise there are some defaults that mess with your API format"
    -   "url" is the api endpoint (obtain from api docs)
    -   headers\
        ![](./_resources/APIs.resources/FPDXa2MXwAEr7Mx.png){.lightbox width="289"}

## [{httr2}]{style="color: #990000"}

-   POST\
    ![](_resources/APIs.resources/httr2-post-1.png)
    -   Contacts Home Assistant API and turns off a light.

## [{plumber}]{style="color: #990000"} {#sec-apis-plumb .unnumbered}

-   Serves R objects as an API
-   3 Main Components: Function Definition, Request Type, API Endpoint
-   Misc
    -   Adding \`host = "0.0.0.0" to `run_pr()` opens the API to external traffic
    -   [{valve}]{style="color: #990000"} - Auto-scales plumber APIs concurrently using Rust libraries Axum, Tokio, and Deadpool --- similar to how gunicorn auto-scales fastapi and Flask apps
-   Cloud options for serving Plumber APIs
    -   Install everything on an Amazon EC2 instance

    -   Using a Docker image

        -   Saturn Cloud Deployments\
            ![](./_resources/APIs.resources/Screenshot-723.png)

        -   Google Cloud Run

        -   Docker/Kubernetes

    -   Managed Solutions

        -   RStudio Connect
        -   Digital Ocean
-   Load Testing
    -   [{loadtest}]{style="color: #990000"}
        -   Test how your API performs under various load scenarios

        -   Outputs tibble of various measurements

        -   [Example]{.ribbon-highlight}:

            ``` r
            library(loadtest)
            results <- loadtest(url = <api_url>, method = "GET", threads = 200, loops = 1000)
            ```

            -   Says simulate 200 users hitting the API 1000 times
-   Documentation
    -   Plumber creates an OpenAPI (aka Swagger) YAML file that documents parameters, tags, description, etc. automatically for users to know how to use your API
    -   Access
        -   View webui, e.g .(http://127.0.0.1:9251/\_\_docs\_\_/)
    -   Edit the yaml
        -   e.g. (http://127.0.0.1:9251/openapi.json)
-   Scaling
    -   Natively can only handle 1 request at a time
    -   [{]{style="color: #990000"}[valve](https://github.com/josiahParry/valve){style="color: #990000"}[}]{style="color: #990000"} - Parallelize your plumber APIs. Redirects your plumbing for you.
    -   [{future}]{style="color: #990000"} - can be used to spawn more R processes to handle multiple requests
        -   Resource: [Rstudio Global 2021](https://www.rstudio.com/resources/rstudioglobal-2021/plumber-and-future-async-web-apis/)

        -   [Example]{.ribbon-highlight}

            ``` r
            # rest_controller.R
            future::plan("multisession")

            @* @post /make-prediction
            make_prediction <- function (req) {
                future::future({       
                    user_info <- req$body
                    df_user <- clean_data(user_info) # sourced helper function
                    result <- predict(model, data = df_user)
                    result
                })
            }
            ```
-   Logging
    -   Useful for debugging, monitoring performance, monitoring usage
    -   Provides data for ML monitoring to alert in case of data/model drift
    -   [{logger}]{style="color: #990000"}
        -   [Example]{.ribbon-highlight}:

            ``` r
            #* @post /make-prediction
            make_predicition <- function(req) {
                user_info <- req$body
                df_user <- clean_data(user_info) # sourced helper function
                result <- predict(model, data = df_user)
                logger::log_info(glue("predicted_{user_info$id}_[{result}]{style='color: #990000'}"))
                aws.s3::s3save(data.frame(id = user_info$id, result = result), ...)
                result
            }
            ```
-   [Example]{.ribbon-highlight}: Basic Get request
    -   rest_controller.R

        ``` r
        #* @get /sum
        function(a, b) {
            as.numeric(a) + as.numeric(b)
        }
        ```

        -   "/sum" is an endpoint

    -   Run Plumber on rest_controller.R

        ``` r
        plumber::pr("rest_controller.R") %>%
            plumber::pr_run(port = 80)
        ```

        -   80 is a standard browser port

    -   Get the sum  of 1 + 2 by sending a Get request

        -   Type "127.0.0.1/sum?a=1&b=2" into your browser
        -   `httr::GET("127.0.0.1/sum?a=1&b=2")`
-   [Example]{.ribbon-highlight}: Basic Model Serving
    -   rest_controller.R

        ``` r
        source("helper_functions.R")
        library(tidyverse)

        model <- read_rds("trained_model.rds")

        #* @post /make-prediction
        make_predicition <- function(req) {
            user_info <- req$body
            df_user <- clean_data(user_info) # sourced helper function
            result <- predict(model, data = df_user)
            result
        }
        ```

## [{{requests}}]{style="color: goldenrod"} {#sec-apis-reqlib .unnumbered}

-   Use `Session` to make a pooled request to the **same** host ([Video](https://www.youtube.com/watch?v=u6PiK2u-U8w), [Docs](https://requests.readthedocs.io/en/latest/user/advanced/))
    -   [Example]{.ribbon-highlight}

        ``` python
        import pathlib
        import requests

        links_file = pathilib.Path.cwd() / "links.txt"
        links = links_file.read_text().splitlines()[:10]
        headers = {"User-Agent": "Mozilla/5.0 (X!!; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0}

        # W/o Session (takes about 16sec)
        for link in links:
          response = requests.get(link, headers=headers)
          print(f"{link} - {response.status_code}")

        # W/Session (takes about 6sec)
        with requests.Session() as session:
          for link in links:
            response = session.get(link, headers=headers)
            print(f"{link} - {response.status_code}")
        ```

        -   The first way syncronously makes a get request to each URL
            -   Makes several requests to the same host
        -   The second way reuses the underlying TCP connection, which can result in a significant performance increase.
-   Retrieve Paged Results One at a Time
    -   Generator

        ``` python
        from typing import Iterator, Dict, Any
        from urllib.parse import urlencode
        import requests


        def iter_beers_from_api(page_size: int = 5) -> Iterator[Dict[str, Any]]:
            session = requests.Session()
            page = 1
            while True:
                response = session.get('https://api.punkapi.com/v2/beers?' + urlencode({
                    'page': page,
                    'per_page': page_size
                }))
                response.raise_for_status()

                data = response.json()
                if not data:
                    break

                yield from data

                page += 1
        ```

    -   Iterate through each page of results

        ``` python
        >>> beers = iter_beers_from_api()
        >>> next(beers)
        {'id': 1,
         'name': 'Buzz',
         'tagline': 'A Real Bitter Experience.',
         'first_brewed': '09/2007',
         'description': 'A light, crisp and bitter IPA brewed...',
         'image_url': 'https://images.punkapi.com/v2/keg.png',
         'abv': 4.5,
         'ibu': 60,
         'target_fg': 1010,
        ...
        }
        >>> next(beers)
        {'id': 2,
         'name': 'Trashy Blonde',
         'tagline': "You Know You Shouldn't",
         'first_brewed': '04/2008',
         'description': 'A titillating, ...',
         'image_url': 'https://images.punkapi.com/v2/2.png',
         'abv': 4.1,
         'ibu': 41.5,
        ```

## [{{http.client}}]{style="color: goldenrod"} {#sec-apis-httplib .unnumbered}

-   [Docs](https://docs.python.org/3/library/http.client.html#module-http.client)

-   The Requests package is recommended for a higher-level HTTP client interface.

-   [Example 1]{.ribbon-highlight}: Basic GET

    ``` python
    import http.client
    import json

    conn = http.client.HTTPSConnection("api.example.com")
    conn.request("GET", "/data")
    response = conn.getresponse()
    data = json.loads(response.read().decode())
    conn.close()
    ```

-   [Example 2]{.ribbon-highlight}:

    -   GET

        ``` python
        import http.client

        url = '/fdsnws/event/1/query'
        query_params = {
            'format': 'geojson',
            'starttime': "2020-01-01",
            'limit': '10000',
            'minmagnitude': 3,
            'maxlatitude': '47.009499',
            'minlatitude': '32.5295236',
            'maxlongitude': '-114.1307816',
            'minlongitude': '-124.482003',
        }
        full_url = f'https://earthquake.usgs.gov{url}?{"&".join(f"{key}={value}" for key, value in query_params.items())}'

        print('defined params...')

        conn = http.client.HTTPSConnection('earthquake.usgs.gov')
        conn.request('GET', full_url)
        response = conn.getresponse()
        ```

    -   JSON response

        ``` python
        import pandas as pd
        import json

        if response.status == 200:
            print('Got a response.')
            data = response.read()
            print('made the GET request...')
            data = data.decode('utf-8')
            json_data = json.loads(data)
            features = json_data['features']
            df = pd.json_normalize(features)

            if df.empty:
                print('No earthquakes recorded.')
            else:
                df[['Longitude', 'Latitude', 'Depth']] = df['geometry.coordinates'].apply(lambda x: pd.Series(x))
                df['datetime'] = df['properties.time'].apply(lambda x : datetime.datetime.fromtimestamp(x / 1000))
                df['datetime'] = df['datetime'].astype(str)
                df.sort_values(by=['datetime'], inplace=True)
        else:
          print(f"Error: {response.status}")
        ```
