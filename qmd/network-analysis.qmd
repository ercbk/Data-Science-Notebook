# Network Analysis {#sec-netanal .unnumbered}

## Misc {#sec-netanal-misc .unnumbered}

-   Packages
    -   [{]{style="color: #990000"}[statnet](https://statnet.org/){style="color: #990000"}[}]{style="color: #990000"} - statnet is a collection of software packages for statistical network analysis that are designed to work together, with a common data structure and API, to provide seamless access to a broad range of network analytic and graphical methodology.
        -   [List](https://statnet.org/workshops/) of individual package tutorials
-   Analysis Questions
    -   At a given moment in time:
        -   Who is connected to whom? Who is not connected?
        -   Where, and who are the hubs?
        -   Where and about what are the clusters? Are there silos?
    -   Changes over time:
        -   Are new connection forming?
        -   Are new patterns of connectivity forming?
        -   How was our network before and after the introduction of an activity?
-   Issues with Statistics
    -   They are unable to leverage node features at all. All nodes with the same values for these summary statistics are indistinguishable from each other.
    -   There is no learnable component in the production of these features. We cannot fit a custom objective or train them jointly with a downstream task.

## Terms {#sec-netanal-terms .unnumbered}

-   [**Centrality**]{style="color: #14adff"}
    -   Measures, abstractly, how important a given graph is to the connectivity of the overall graph
    -   higher for nodes which lie in paths that efficiently connect many nodes to each other.
    -   Types:
        -   **Betweenness** - Nodes with high betweenness centrality tend to be the "crossroads" between nodes, i.e. when seeking to connect with another node that isn't immediately adjacent, it will typically involve a node with high betweeness centrality.
            -   These nodes are important in keeping the network connected
        -   **Closeness** - Nodes with high closeness centrality have quick access to many other nodes. These nodes have the shortest distance, in network terms, to all other nodes.
            -   These nodes are important in spreading information to all other nodes as quickly as possible.
-   [**Clusters**]{style="color: #14adff"}
    -   **Cluster Clique** - a cluster that has at least one node that's connected to another node outside of the cluster
    -   **Cluster Silo** - a cluster that has no node connected to any other node outside of the cluster
-   [**Clustering coefficient**]{style="color: #14adff"}
    -   Measures the density of a node's local portion of the graph.
    -   Nodes who have neighbors that are all connected to each other will have a higher clustering coefficient
-   [**Degree**]{style="color: #14adff"} - total edges a given node has.
-   [**Density**]{style="color: #14adff"} - the number of edges in the observed network divided by the number of possible edges
-   [**Edges**]{style="color: #14adff"} (aka [**Dyads**]{style="color: #14adff"})- connection between two nodes. Depending on the type of connection, the edge can have a direction.
-   [**Edge Bundling**]{style="color: #14adff"} - visually bundle together similar edges to reduce the visual clutter within a graph
-   [**Multiplexity**]{style="color: #14adff"} - The number of connections between two nodes
    -   Could be represented by the thickness, darkness, etc. of an edge between 2 nodes
    -   Nodes that have high multiplicity with each other typically form clusters
-   [**Random Graph**]{style="color: #14adff"} - A network with n nodes where the edges between nodes occur randomly with probability P (each potential edge is one Bernoulli trial). Network density is typically used for P.
-   [**Transitivity**]{style="color: #14adff"} of a relation means that when there is a tie from i to j, and also from j to h, then there is also a tie from i to h: friends of my friends are my friends\
    ![](_resources/Network-Analysis.resources/transitivity1.png){width="330"}
    -   **Transitivity Index** (aka **Clustering Index**) = \# Transitive Triads / \# Potentially Transitive Triads

    -   This is between 0 and 1; it is 1 for a transitive graph.

    -   For random graphs, the expected value of the transitivity index

        is close to the density of the graph.

## Layouts {#sec-netanal-layalg .unnumbered}

-   **Spring**
    -   [Fruchterman-Reingold force-directed algorithm](https://en.wikipedia.org/wiki/Force-directed_graph_drawing)
        -   arranges the nodes so the edges have similar length and minimum crossing edges
-   **Random** - nodes positioned uniformly at random in the unit square
-   **Circular** - nodes on a circle
-   **Bipartite** - nodes in two straight lines
-   **Spectral** - nodes positioned using the eigenvectors of the graph Laplacian

## Social Networks

-   The principle differences between empirical social networks and random graphs is the pattern of triads (esp. transitive) in human social networks.
    -   The transitivity index for social networks is typically between 0.3 and 0.6.
-   Roles of Triads
    -   Hierarchy
    -   Network Closure
    -   Brokerage
    -   Exclusion
    -   Generalized Exchange
    -   Bystander Effects
    -   Forbidden Relationships
    -   Filial Loyalties
-   Transitive/Intransitive Triads
    -   Friendships tend to be overwhelmingly transitive (Holland and Leinhardt 1971)
    -   Children show increasing tendencies for transitivity as they get older (Leinhardt 1972)
    -   Higher agreement between pairs within transitive triads (Krackhardt and Kilduff 2002)
    -   Adolescents in intransitive friendship triads have more suicidal ideations (Bearman and Moody 2004)
    -   Yeon Jung Yu (2016) showed that sex workers on Hainan Island, China, who overwhelmingly tend to be migrants from rural areas, have a large number of intransitive friendship triangles, which she interpreted as arising because of the need to manage information about these women's activities away from home.

## Exponential Random Graph Models (ERGM)

-   Analogous to logistic regression: ERGMs predict the probability that a pair of nodes in a network will have a tie between them.

-   Misc

    -   Notes from [Introduction to ERGMs](https://eehh-stanford.github.io/SNA-workshop/ergm-intro.html)
    -   Packages
        -   {[statnet}]{style="color: #990000"} - See [Misc](network-analysis.qmd#sec-netanal-misc){style="color: green"} \>\> Packages
    -   Can be used for directed, undirected, valued, unvalued, and bipartite networks.
    -   Fitting a model with just edges is kind of like an intercept-only regression model.
    -   Less informative for dense networks.
        -   Examples: From Introduction to ERGMs
            -   Dense\
                ![](_resources/Network-Analysis.resources/ergm-bott1.png)\
                ![](_resources/Network-Analysis.resources/ergm-bott2.png)\
                ![](_resources/Network-Analysis.resources/ergm-bott3.png){width="275"}
            -   Not Dense\
                ![](_resources/Network-Analysis.resources/ergm-bott4.png){width="275"}
        -   Triads (which I guess are more common in dense networks) cause problems in ERGMs. They often lead to degeneracy.

-   Goal: Describe the local selection forces that shape the global structure of a network

-   Examples of networks examined using ERGM include knowledge networks, organizational networks, colleague networks, social media networks, and networks of scientific development.

-   The basic principle underlying the method is comparison of an observed network to Exponential Random Graphs.

    -   The Null Hypothesis is a Erdos-Renyi graph
        -   A random graph where the degree of any node is binomially distributed (with n-1 Bernoulli trials per node, for a directed graph). (n is the number of nodes)

-   Equation:\
    $$
    \text{logit}(Y_{ij} = 1 \; | \; y_{ij}^c) = \theta^T \delta (y_{ij})
    $$

    -   $\theta$ is a vector of coefficients
    -   $y_{ij}$ denotes ij^th^ dyad in graph $y$
        -   If $y_{ij} = 1$, then i and j are connected by an edge.
        -   If $y_{ij} = 0$, then i and j are NOT connected by an edge.
        -   $y_{ij}^c$ is the complement (i.e. all other pairs of vertices in $y$ other than (i, j)).
    -   $\delta(y_{ij})$ is the *change statistic*. A measure of how the graph statistic $g(y)$ changes if the ij^th^ vertex is toggled on or off.
        -   $\delta(y_{ij}) = g(y_{ij}^+) - g(y_{ij}^-)$
        -   $y_{ij}^+$ is the same network as $y$ except that $y_{ij} = 1$.
        -   $y_{ij}^-$ is the same network as $y$ except that $y_{ij} = 0$.

-   Example: {statnet} Edges model

    ``` r
    bottmodel.01 <- ergm(bott[[4]] ~ edges)

    ## Evaluating log-likelihood at the estimate.
    summary(bottmodel.01)
    ## 
    ## ==========================
    ## Summary of model fit
    ## ==========================
    ## 
    ## Formula:   bott[[4]] ~ edges
    ## 
    ## Iterations:  4 out of 20 
    ## 
    ## Monte Carlo MLE Results:
    ##       Estimate Std. Error MCMC %  p-value    
    ## edges  -0.7621     0.2047      0 0.000313 ***
    ## ---
    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
    ## 
    ##      Null Deviance: 152.5  on 110  degrees of freedom
    ##  Residual Deviance: 137.6  on 109  degrees of freedom
    ##  
    ## AIC: 139.6    BIC: 142.3    (Smaller is better.)
    ```

-   

## Node Embeddings {#sec-netanal-ndembd .unnumbered}

-   Learnable vectors of numbers that can be mapped to each node in the graph, allowing us to learn a unique representation for each node.
    -   Use as features in a downstream model.
-   Methods
    -   [DeepWalk](https://arxiv.org/pdf/1403.6652.pdf) and [Node2vec](https://arxiv.org/pdf/1607.00653.pdf) papers
        -   Use the concept of a random walk, which involves beginning at a given node and randomly traversing edges, to produce pairs of nodes that are nearby each other.
        -   Trained by maximizing the cosine similarity between nodes that co-occurred in random walks.
            -   This training objective leverages the [homophily assumption](https://en.wikipedia.org/wiki/Network_homophily), which states that nodes that are connected to each other tend to be similar to each other.
-   Issues with Embeddings
    -   They do not use node features at all. They assume that close-by nodes are similar without actually using the node features to confirm this assumption.
-   They rely on a fixed mapping from node to embedding (i.e. this is a transductive method).
    -   For dynamic graphs, where new nodes and edges may be added, the algorithm must be re-ran from scratch, and all node embeddings need to be recalculated. In real-world problems, this is quite a big issue, as most online platforms have new users signing up every day, and new edges being created constantly.

## Graph Convolutional Networks (GCN) {#sec-netanal-gcn .unnumbered}

-   Learns representations of nodes by learning a function that aggregates a node's neighborhood (the set of nodes connected to the original node), using both graph structure and node features.
    -   These representations are a function of a node's neighborhood and are not hardcoded per node (i.e. this is an inductive method), so changes in graph structure do not require re-training the model.
-   For unsupervised learning tasks, the method is similar to Node2vec/DeepWalk
-   Layers
    -   A layer takes a weighted average of the node features in the original node's neighborhood, and the weights are learned by training the network
    -   Adding layers produces aggregations that use more of the graph.
        -   The span of the subgraph used to produce a node's embedding is expanded by 1 hop.
