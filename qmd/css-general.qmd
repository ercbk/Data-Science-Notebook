# General {#sec-css-gen .unnumbered}

## Misc {#sec-css-gen-misc .unnumbered}

![](./_resources/html,_css.resources/selectors.png){.lightbox}

-   Resources

    -   [Online Interactive Cheat Sheet](https://htmlcheatsheet.com/css/)
    -   <https://css-tip.com/>
    -   <https://uiverse.io/elements>
        -   CSS code for various UI elements
        -   Buttons, Check Boxes, Toggle Switches, Cards, Loaders, Inputs, Radio Buttons, Forms, Patterns, and Tool Tips

-   Tools

    -   [Widget](https://neumorphism.io/#e0e0e0) for testing parameter values for css styling a div box
        -   Gradient inside, shadow, border, size, etc.
        -   Similar [tool](https://simonwillison.net/2024/Jul/8/box-shadow-css-generator/) mostly for box shadows

-   Margin, Border, and Padding\
    ![](_resources/CSS-General.resources/margin-padding-border-1.jpg){.lightbox width="432"}

    -   Margin is the space between the edge of the div/border and the rest of the elements
    -   Padding is the space between the text and the edge of the div/border
    -   Syntax
        -   padding: 25px 50px 75px 100px;
            -   top padding is 25px
            -   right padding is 50px
            -   bottom padding is 75px
            -   left padding is 100px
        -   padding: 25px 50px 75px;
            -   top padding is 25px
            -   right and left paddings are 50px
            -   bottom padding is 75px
        -   padding: 25px 50px;
            -   top and bottom paddings are 25px
            -   right and left paddings are 50px
        -   padding: 25px;
            -   all four paddings are 25px

-   Column Widths in CSS Grid\
    ![](./_resources/html,_css.resources/image.png){.lightbox}

-   CSS comment - `/* comment */`

-   Selector formats

    -   Syntax: `#<class>.<id><additional-stuff>`
    -   [Example]{.ribbon-highlight}:
        -   CSS

            ``` css
            #header.fluid-row::before{
            }
            ```

        -   HTML

            ``` html
            <div class="fluid-row" id="header"> == $0
            ::before
            </div>
            ```

-   Include css styling directly into a html page

    -   [Example]{.ribbon-highlight}: Via HTML style tag

        ``` html
        <style>
        body {
          padding: 50px 25px 0px 25px;
          font-family: 'Roboto', sans-serif;
          font-size: 19px;
        }
        </style>
        ```

    -   [Example]{.ribbon-highlight}: Via R chunk

        ``` r
        htmltools::tags\$link(href = "https://fonts.googleapis.com/css2?family=Libre+Baskerville:ital,wght\@0,400;0,700;1,400&display=swap",
                              rel = "stylesheet")
        ```

    -   [Example]{.ribbon-highlight}: styling of a legend html div

        ``` html
        <style type='text/css'>
          .my-legend .legend-title {
            text-align: left;
            margin-bottom: 8px;
            font-weight: bold;
            font-size: 90%;
            }
          .my-legend .legend-scale ul {
            margin: 0;
            padding: 0;
            float: left;
            list-style: none;
            }
          .my-legend .legend-scale ul li {
            display: block;
            float: left;
            width: 50px;
            margin-bottom: 6px;
            text-align: center;
            font-size: 80%;
            list-style: none;
            }
          .my-legend ul.legend-labels li span {
            display: block;
            float: left;
            height: 15px;
            width: 50px;
            }
          .my-legend .legend-source {
            font-size: 70%;
            color: #999;
            clear: both;
            }
          .my-legend a {
            color: #777;
            }
        </style>
        ```

        -   See [link](https://tilemill-project.github.io/tilemill/docs/guides/advanced-legends/) for details on the legend div element that uses this CSS

## Centering

-   There are also instructions for placing elements in different positions (e.g. right edge)
-   Notes from [How To Center a Div](https://www.joshwcomeau.com/css/center-a-div/)
    -   There's also code/explainer for centering elements (e.g. images) that have to stacked on top of each other

### Elements

-   Center Horizontally with auto-margins

    ``` css
    .element {
      max-width: fit-content;
      margin-left: auto;
      margin-right: auto;
      /* margin-inline: auto*/
    }
    ```

    -   Use when you want to horizontally center a single element without disturbing any of its siblings
    -   [max-width]{.arg-text} is used because if [width]{.arg-text} is used instead, it would lock it to that size, and the element would overflow when the container is really narrow.
    -   Including *only* [margin-left: auto]{.arg-text} will force the div flush with the right side and vice verse with [margin-right]{.arg-text}
    -   [margin-inline: auto]{.arg-text} can replace both [margin-left]{.arg-text} and [margin-right]{.arg-text} to center the div

-   Centering Vertically and Horizontally

    ``` css
    .container {
      align-content: center;
    }
    .element {
      max-width: fit-content;
      margin-inline: auto;
    }
    ```

-   Center Vertically and Horizontally with Flexbox

    ``` css
    /* single element */
    .container {
      display: flex;
      justify-content: center;
      align-items: center;
    }
    /* multiple elements */
    .container {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      gap: 4px;
    }
    ```

    -   The most versatile method; it can be used to center one or multiple children, horizontally and/or vertically, whether they're contained or overflowing.
    -   [flex-direction]{.arg-text} controls the direction in which the items are aligned, and it can have other values: [column]{.arg-text}, [row-reverse]{.arg-text}, [column-reverse]{.arg-text}

-   Text

    ``` css
    container {
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
    }
    ```

    -   Blocks of text can be treated as one element and can be centered using the previous methods. This code ([text-align]{.arg-text}) is for centering the rows of text within a element's block.

### Viewports

-   Useful for elements like dialogs, prompts, and GDPR banners need to be centered within the viewport. (Think pop-ups)

-   Centering With Known Sizes

    ``` css
    .element {
      position: fixed;
      inset: 0px;
      width: 12rem;
      height: 5rem;
      max-width: 100vw;
      max-height: 100dvh;
      margin: auto;
    }
    ```

    -   Complex and has more settings that depend on the element. See article for details but there are four main concepts:
        -   Fixed positioning
        -   Anchoring to all 4 edges with `inset: 0px`
        -   Constrained width and height
        -   Auto margins
    -   Omitting [top: 0px]{.arg-text} will anchor the element to the bottom
        -   Use `calc` with max-width to make sure theres a buffer around the element

            ``` css
            max-width: calc(
                100vw - 8px * 2
              );
            ```

-   Centering Elements With Unknown Sizes

    ``` css
    .element {
      position: fixed;
      inset: 0;
      width: fit-content;
      height: fit-content;
      margin: auto;
    }
    ```

    -   [fit-content]{.arg-text} is doing the work
