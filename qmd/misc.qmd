# Misc {#sec-misc .unnumbered}

## Misc {#sec-misc-misc .unnumbered}

-   R-devel (\>= 4.4.0) gained a command-line option to adjust the limit connections (previous limit was 128 parallel workers)

    ``` bash
    $ R
    > parallelly::availableConnections()
    [1] 128

    $ R --max-connections=512
    > parallelly::availableConnections()
    [1] 512
    ```

## RStudio {#sec-misc-rstud .unnumbered}

-   Job: Run script in the background

    ``` r
    library(rstudioapi)
    jobRunScript("wfsets_desperation_tune.R", name = "tune", exportEnv = "R_GlobalEnv")
    ```

    -   need to look up args
    -   I think exportEnv takes the variables in your current environment and runs the script with them as inputs

-   Shortcuts

    -   Keyboard Shortcuts: Alt + Shift + k
    -   Command Palette: Ctrl + Shift + p
    -   Find in Files: Ctrl + Shift + f
    -   Multiple Cursors: Ctrl + Alt + up/down

## Hackathon Criteria {#sec-misc-hack .unnumbered}

![](./_resources/Misc.resources/1-fPKRR5rUDIXzC_b85HeBzg.jpeg)

## Update R {#sec-misc-update .unnumbered}

-   Misc
    -   [{]{style="color: #990000"}[rig](https://github.com/r-lib/rig){style="color: #990000"}[}]{style="color: #990000"} - r version management system
    -   `update.packages(checkBuilt = TRUE, ask = FALSE)` should search for packages in other R versions and update them in the new R version
    -   Errors when compiling from source may require installing libraries and they'll supply code to install via "pacman"
        -   Open Start \>\> scroll down to RTools40 \>\> RTools Bash
        -   Paste pacman code and hit enter to install
    -   Bayes packages are a pain in the ass
        -   {brms} dependency, {igraph}, didn't have a binary on CRAN and wouldn't compile from source even with correct libraries installed.
            -   Sol'n: `install.packages("igraph", repos = 'https://igraph.r-universe.dev')`
                -   installs dev version from r-universe
        -   [{cmdstanr}]{style="color: #990000"} doesn't live on CRAN, so you have to use: `install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))`
            -   Check for latest cmdstan version
                -   After loading the package, `library(cmdstanr)` , it should run a check on your cmdstan version and tell you if there's a newer version.
                -   To update, first check toolchain: `check_cmdstan_toolchain()`
                    -   Might tell you to update RTools or that you need some C++ library added
                -   Fix C++ toolchain with `check_cmdstan_toolchain(fix = TRUE)`
                -   Update cmdstan: `install_cmdstan()`
    -   Some [{easystats}]{#990000 style="'color:"} packages had gave {pak} some problems. No difficulties using `install.packages` with default repo or if they had a r-universe repo though.
-   Steps
    -   Check/Update rig version

        -   In powershell: `rig --version`
        -   Check current rig release: [link](https://github.com/r-lib/rig/releases)
        -   Download and install if your version isn't current

    -   RTools: Check to see if you have the latest because you'll need it to compile some of newest versions of packages.

        -   Your rtools folder has the version in it's folder name.
        -   rtools [website](https://cran.r-project.org/bin/windows/Rtools/rtools40.html) has the latest version and an .exe to download
        -   Or via rig: (in powershell) `rig system update-rtools40`
            -   There was no option in `--help` for rtools42, and when I ran `update-rtools40` , it didn't install rtools42, so this may not be useful. Check `rig system --help` to see if it's been update with the latest version of rtools

    -   Copy user installed packages in current R version

        -   In R:

            ``` r
            squirrel <- names(installed.packages(priority = "NA")[, 1]) # user installed packages
            readr::write_rds(squirrel, "packages.rds")
            ```

    -   Install new version of R

        -   Close R
        -   `rig add release`Â  installs the latest version of R.

    -   Add R to path

        -   Right-click Windows \>\> System \>\> (right panel) Advanced System Settings \>\> Environment Variables \>\> Under User Variables, highlight Path, click Edit \>\> Click Add
            -   Add path to directory with all the RScript, R exe, etc. e.g. "C:\\Program Files\\R\\R-4.2.3\\bin\\x64"

    -   Open R

        -   If RStudio
            -   Tools \>\> Global Options \>\> General
                -   Under "R version", click "change" button; choose new R version
                -   quit session and restart RStudio

    -   Install packages

        ``` r
        moose <- readRDS("packages.rds")
        pak::pkg_install(moose)
        fs::file_delete("packages.rds")
        ```
