# Privacy/Security {#sec-priv .unnumbered}

## Misc {#sec-priv-misc .unnumbered}

::: {.callout-tip collapse="true"}
## Packages

-   [{]{style="color: #990000"}[xxhashlite](https://github.com/coolbutuseless/xxhashlite){style="color: #990000"}[}]{style="color: #990000"} - Very fast hash functions using xxHash
-   [{{]{style="color: goldenrod"}[metasyn](https://metasyn.readthedocs.io/en/latest/index.html){style="color: goldenrod"}[}}]{style="color: goldenrod"} - For generating synthetic tabular data with a focus on privacy
-   [{]{style="color: #990000"}[simPop](https://cran.r-project.org/web//packages//simPop/index.html){style="color: #990000"}[}]{style="color: #990000"} ([Vignette](https://www.jstatsoft.org/article/view/v079i10)) - Tools and methods to simulate populations for surveys based on auxiliary data. The tools include model-based methods, calibration and combinatorial optimization algorithms
-   [{]{style="color: #990000"}[sdcmicro](https://sdcpractice.readthedocs.io/en/latest/sdcMicro.html){style="color: #990000"}[}]{style="color: #990000"} ([CRAN](https://cran.r-project.org/web//packages//sdcMicro/index.html))- For the generation of anonymized (micro)data, i.e. for the creation of public- and scientific-use files.
-   [{]{style="color: #990000"}[diffpriv](https://www.bipr.net/diffpriv/){style="color: #990000"}[}]{style="color: #990000"} - Implements the formal framework of differential privacy: differentially-private mechanisms can safely release to untrusted third parties: statistics computed, models fit, or arbitrary structures derived on privacy-sensitive data.
-   [{]{style="color: #990000"}[encryptr](https://github.com/cneskey/encryptr){style="color: #990000"}[}]{style="color: #990000"} - Encrypt and decrypt data frame or tibble columns using the strong RSA public/private keys
-   [{]{style="color: #990000"}[encryptedRmd](https://cran.r-project.org/web/packages/encryptedRmd/index.html){style="color: #990000"}[}]{style="color: #990000"} - Encrypt Html Reports Using 'Libsodium'
-   [{]{style="color: #990000"}[randomForestSRC](https://www.randomforestsrc.org/){style="color: #990000"}[}]{style="color: #990000"} - Fast Unified Random Forests for Survival, Regression, and Classification (RF-SRC)
    -   Anonymous random forests for data privacy
-   [{]{style="color: #990000"}[deident](https://cran.r-project.org/web/packages/deident/index.html){style="color: #990000"}[}]{style="color: #990000"} ([JOSS](https://joss.theoj.org/papers/10.21105/joss.07157)) - A framework for the replicable removal of personally identifiable data (PID) in data sets.
-   [{]{style="color: #990000"}[rmonocypher](https://github.com/coolbutuseless/rmonocypher){style="color: #990000"}[}]{style="color: #990000"} - Simple encryption of R objects using a strong modern technique.
-   [{]{style="color: #990000"}[askpass](https://r-lib.r-universe.dev/askpass){style="color: #990000"}[}]{style="color: #990000"} - Password Entry Utilities for R, Git, and SSH
    -   Cross-platform utilities for prompting the user for credentials or a passphrase, for example to authenticate with a server or read a protected key.
    -   Includes native programs for MacOS and Windows, hence no 'tcltk' is required.
    -   Password entry can be invoked in two different ways:
        -   Directly from R via the askpass() function
        -   Indirectly as password-entry back-end for 'ssh-agent' or 'git-credential' via the SSH_ASKPASS and GIT_ASKPASS environment variables.
            -   The user can be prompted for credentials or a passphrase if needed when R calls out to git or ssh.
-   [{]{style="color: #990000"}[vvbitwarden](https://cran.r-project.org/web/packages/vvbitwarden/index.html){style="color: #990000"}[}]{style="color: #990000"} - Provides functions to securely retrieve secrets from a 'Bitwarden Secrets Manager' vault using the 'Bitwarden CLI', enabling secret and configuration management within R packages and workflows
-   [{]{style="color: #990000"}[trustmebro](https://kuuuwe.github.io/trustmebro/){style="color: #990000"}[}]{style="color: #990000"} - Provides functions that make it easy to inspect various subject-generated ID codes (SGIC) for plausibility.
    -   Helps with inspecting other common identifiers, ensuring that your data stays clean and reliable. Beyond plausibility checks, trustmebro offers a few tools for smooth data import and convenient recoding.
    -   **SGIC** - Often consist of a set of stable participant characteristics that enable a respondent’s answers to be matched across multiple points in time, while preserving participant anonymity (i.e., no personal identifiers such as name, date of birth, or address are collected) ([source](https://journals.sagepub.com/doi/10.1177/01632787211031625))
:::

-   Also see [Simulation, Data](simulation-data.qmd#sec-sim-data){style="color: green"}
-   Tools
    -   [rclone](https://rclone.org/) - A command-line program to manage files on cloud storage. It is a feature-rich alternative to cloud vendors' web storage interfaces.
        -   [Over 70 cloud storage products](#0) support rclone including S3 object stores, business & consumer file storage services, as well as standard transfer protocols.
        -   Able to add the encryption to files and the keys will be on your local device
    -   [{]{style="color: #990000"}[staticrypt](https://github.com/robinmoisson/staticrypt){style="color: #990000"}[}]{style="color: #990000"} - Password protect a static HTML page, decrypted in-browser in JS with no dependency. No server logic needed. (Useful for HTML reports)
        -   [hrbrmstr](https://fosstodon.org/@hrbrmstr@mastodon.social/113135958788120988): "Please use long, "complex" \*passphrases\* for this tool/docs. These documents are susceptible to brute-force attacks, so you gotta make it hard for the attacker.

            It uses solid encryption practices (AES-256 encryption; PBKDF2 for password hashing w/decent iterations); but — unlike public/private key-based message exchanges — once the password leaks, there's no access revocation"
    -   [VeraCrypt](https://github.com/veracrypt/VeraCrypt) - Encrypt files before cloud upload for extra security

## Tags {#sec-priv-tag .unnumbered}

-   Tag sensitive information in dataframes

    ``` r
    names(df)
    [1] "date" "first_name" "card_number" "payment"
    # assign pii tags
    attr(df, "pii") <- c("name", "ccn", "transaction")
    ```

    -   Personally Identifiable Information (PII)

-   Tag dataframes with the names of regulations that are applicable

    ``` r
    attr(df, "regs") <- c("CCPA", "GDPR", "GLBA")
    ```

    -   CCPA is the privacy regulation for California
    -   GDPR is the privacy regulation for the European Union
    -   GLBA is the financial regulation for the United States
        -   Needed because df has credit card and financial information
    -   Saving objects as .rds files preserves tags

## Hashing {#sec-priv-hash .unnumbered}

-   [{]{style="color: #990000"}[sodium](https://github.com/jeroen/sodium){style="color: #990000"}[}]{style="color: #990000"} - Uses a slow hashing algorithm that is specifically designed to protect stored passwords from brute-force attacks. More on this [here](#0)
-   [{]{style="color: #990000"}[digest](https://cran.r-project.org/web/packages/digest/index.html){style="color: #990000"}[}]{style="color: #990000"}
    -   Hash Function\
        ![](./_resources/Privacy.resources/Screenshot%20(511).png)
    -   Apply Hash Function to PII Fields\
        ![](./_resources/Privacy.resources/Screenshot%20(513).png)
