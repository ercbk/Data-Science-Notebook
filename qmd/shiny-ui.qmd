# Shiny, UI

TOC

* Misc
* Design Principles
* Style
* Responsiveness



Misc

* 



Design Principles

* Misc
	* Notes from
		* Erik Kennedy [thread](https://twitter.com/erikdkennedy/status/1610371533784100864)
* De-emphasize Dividing lines![](./_resources/Shiny,_UI.resources/FlkuYkMaEAAT7mp.png)
* Use fonts that subtly convey brand![](./_resources/Shiny,_UI.resources/FlkucwRaUAAVn2J.png)
* Content cards should be lighter than their bg (in dark mode too)![](./_resources/Shiny,_UI.resources/FlkvBDAaYAE8uw4.png)
* Don’t resize icons![](./_resources/Shiny,_UI.resources/FlkvLX3aAAEBH3a.png)
	* Their level of detail and stroke weights are meant to work best at a certain size.
	* Instead, try adding a border or container around them for some extra visual pop
* REMOVE-HIDE-LIGHTEN for cleaner designs![](./_resources/Shiny,_UI.resources/FlkvXLHaEAAY3Nl.png)
* Be consistent until it's time not to be consistent![](./_resources/Shiny,_UI.resources/FlkvnxgaMAAUXoZ.png)
	* Break consistency example: when you're trying to catch the user's eye
* Good imagery![](./_resources/Shiny,_UI.resources/FlkvuG5aAAEnNnj.png)
* Remove Congestion
		See [Designing Accessible Research with R/Shiny UI – Part 2](https://www.r-bloggers.com/2023/01/designing-accessible-research-with-r-shiny-ui-part-2/) for an example of an iterable workflow
		
		Congestion is when an app shows everything, all at once and that’s stressful for the user. It doesn’t elicit the behavior we want for an engaging, learning experience. 
		
		This stress triggers two subconscious actions – run or freeze. Both lead to cognitive load and negative perception, and ultimately, failed adoption.
			Running is expressed in bounce rate. A user will enter the app, become frustrated, and leave.
			
			Freezing means that a user pauses with a delayed time to understand. This can be expressed in a number of ways, but most likely a combination of longer session times with aimless user behavior.
			
	* Minimize options, legends, etc. and move to the edges of the app (e.g. header, sides)
		* Example
			* Prototype![](./_resources/Shiny,_UI.resources/image.png)
				* Issues
					* The tree selector consumes space on the dashboard
					* Selecting via images doesn’t add a lot of value as not all tree species are easily identified by image
					* The UI is too dark
					* The visual accessibility feature was lost as some colors don’t work on a dark background
			* Final
				* Dashboard![](./_resources/Shiny,_UI.resources/image.1.png)
					* The legend moved to the card (see mobile for more details
						* Tree card gives details about species and a summary
						* Clicking upper right icon flips the card to display the bar chart.
					* Switching languages ​​and information about the application moved to the header (right side of blue nav bar)
					* Clicking text in header opens pop-up with options. One for type of tree and one for type of scenario (beteen blue nav bar and map)
					* All other interactive elements that were scattered on the screen are now organized into the right vertical panel on the map. Here is also the color blindness option for people with visual disabilities, as the main focus of the application is on the color ratio on the map
				* Mobile![](./_resources/Shiny,_UI.resources/Screenshot (1199).png)![](./_resources/Shiny,_UI.resources/Screenshot (1198).png)![](./_resources/Shiny,_UI.resources/Screenshot (1200).png)
					* “languages” and “about” moved to the top



Style

* Misc
	* Images and style.css files should go into the "www" folder
	* Dancho full page map UI from app in learning [lab 28](https://www.youtube.com/watch?v=kLiU-hzS7SE)
		* Code only shown partially in learning lab 83
		* Control panel had a transparent background
		* Clickable logos
		* {shiny}, {fresh}, {shinyWidgets}

```
my_theme <- create_theme(
    theme = "paper",
    bs_vars_global(
        body_bg = "black",
        text_color = "#fff"
    ),
    bs_vars_navbar(
        default_bg = "#75h8d1",
        default_color = "#ffffff",
        default_link_color = "#ffffff",
        default_link_active_color = "#75b8d1",
        default_link_active_bg = "#ffffff",
        default_link_hover_color = "#2c3e50"
    ),
    bs_vars_dropdown(
        bg = "#0006",
    ),
    bs_vars_modal(
        content_bg = "#0006"
    )
    bs_vars_wells(
        bg = "#75b8d1
    )
    bs_vars_input(
        color = "#FFF",
        color_placeholder = "bdbdbd"
    ),
    bas_vars_button(
        default_color = "black",
        primary_bg = "black",
        success_bg = "#188C9C",
        info_bq = "#A6CEE3",
        info_color = "#2c3e50",
        warning_bg = "#CCBE93",
        danger_bg = "#E31A1C"
    )
    bs_vars_panel(
        bg = "#0006",
        default_heading_bg = "#0006",
        default_text = "white"
    )
)
ui <- bootstrapPage(

    tags$style(type = "text/css", "html, body {width: ... not seen
    tags$head(
        HTML("<style>
            h1,h2,h3,h4,h5,h6(color:#FFF !important;} .... possibly not seen
            /form-control{color:#FFF;}
            .dataTables_filter{color:white;}
            thead{color:#FFF;}
            </style>")
    ),

    use_theme(my_theme),
    leafletOutput("map", width = "100%", height = "100%" .... not seen

    absolutePanel(
        id = "logos",
        style = "z-index:300;bottom:50px;right:50px;",
        h2("Pharmacy Finder")
    ),

    absolutePanel(
        id = "business-science",
        style = "z-index:300;bottom:50px;left:50px;", .... not seen
        h4("Learn Shiny", class = "text_primary"),
        h5(
            tags$img(src = "https://www.business.scien .... not seen
                    style = "width:48px;-webkit-filte .... not seen
                    "Business Science"
        ) %>%
            tags$a(class = "btn btn-primary btn-sm", .... not seen
    ),

    absolutePanel(
        id = "controls",
        style = "zindex:5000;top:10px;left:50px;",  .... not seen
        draggable = FALSE,
        div(
            class="panel panel-default",
            style = "width:300px;",
            div(
                class="panel-body",
                textInput("city", "City", "Pittsburgh" .... not seen
                selectInput("amenity", "Amenity Type", .... not seen
                shiny::actionButton(
                    inputId = "submit",
                    label = "Search",a
                    class = "btn-default"
                ),
                downloadButton("download_csv", "Downlo .... not seen
            )
        )
    )
)

```


* Implementing a css file
	* [Example]{.ribbon-highlight}: basic![](./_resources/Shiny,_UI.resources/image.3.png)
		* main.css file

```
@import url('https://fonts.googleapis.com/css2?family=Poppins&display=swap');
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
}
body {
  padding: 1rem;
}
#map {
  height: 98vh !important;
  border-radius: 0.5rem !important;
}
```

* app.R

```
ui <- fluidPage(
  tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "main.css")),
  sidebarLayout(
    ...
  )
)
```


Responsiveness

* Responsiveness isn’t the same as performance. Performance is about completing an operation in the minimal amount of time, while responsiveness is about meeting human needs for feedback when executing an action
* Misc
	* Notes from [Improving the responsiveness of Shiny applications](https://www.r-bloggers.com/2023/01/improving-the-responsiveness-of-shiny-applications/)
* Button Click Registered![](./_resources/Shiny,_UI.resources/image.2.png)![](./_resources/Shiny,_UI.resources/Screenshot (1210).png)![](./_resources/Shiny,_UI.resources/Screenshot (1211).png)
	* (left) default arrow for your app
	* (middle) hand indicates to the user that the app has registered their hovering over a button
	* (right) arrow+pie indicates to the user that the app has registered their clicking the button
	* (generic) entry into CSS file

```
html.shiny-busy .container-fluid {
  cursor: wait;
}
```

* Looks like this code is to produce something like the right-side image

* For touch devices (i.e. without cursor), you might want to take a look at [{shinycssloaders}](https://github.com/daattali/shinycssloaders) and/or [{waiter}](https://shiny.john-coene.com/waiter/)
* If the user might have to wait longer than a few seconds for the process they’ve just set in motion to complete, you should consider a progress indicator.
	* [{shiny}](https://shiny.rstudio.com/gallery/progress-bar-example.html) has a progress indicator, while [{waiter}](https://shiny.john-coene.com/waiter/) also offers a nice built-in-to-button option (below)![](./_resources/Shiny,_UI.resources/Screenshot (1216).png)![](./_resources/Shiny,_UI.resources/Screenshot (1215).png)
	* 
	* 

* 


















