# Code, Testing

TOC

* Misc
* Assertive Testing



Misc

* If the code is for a specific dataset/pipeline, then assertive testing makes more sense than traditional software testing.
* If the code is general purpose, it should be in a package undergo traditional software testing
* Packages
	* [{]{style='color: #990000'}[assertthat](https://github.com/hadley/assertthat){style='color: #990000'}[}]{style='color: #990000'}
	* [{testthat}]{style='color: #990000'}
	* [{rlang}]{style='color: #990000'}
	* [{]{style='color: #990000'}[pointblank](https://github.com/rich-iannone/pointblank){style='color: #990000'}[}]{style='color: #990000'} \- This is a heavier-duty package that helps you validate all aspects of datatsets with extensive reporting capabilities.


Assertive Testing

* Testing that happens within the function
* Check for NAs in column

```
if (anyNA(dataset$body_mass_g)) {
  rlang::abort("NAs are present in 'body_mass_g' column")
}
```

* Assert that I have not inadvertently changed the length of the output dataset either by accidentally dropping rows or accidentally introducing duplicates

```
library(testthat)
make_my_rectangle <- function(dataset_a, dataset_b, dataset_c) {

  ... Do stuff

  expect_equal(nrow(output_dataset), nrow(dataset_a))
  expect_false(any(duplicated(output_dataset$id)))

  output_dataset
}
```





























