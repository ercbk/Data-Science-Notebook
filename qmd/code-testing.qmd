# Testing {#sec-code-test .unnumbered}

## Misc {#sec-code-test-misc .unnumbered}

-   If the code is for a specific dataset/pipeline, then assertive testing makes more sense than traditional software testing.
-   If the code is general purpose, it should be in a package undergo traditional software testing
-   Also see
    -   [Package Development \>\> Testing](package-development.qmd#sec-pkgdev-test){style="color: green"}
-   Packages
    -   [{]{style="color: #990000"}[assertthat](https://github.com/hadley/assertthat){style="color: #990000"}[}]{style="color: #990000"}
    -   [{testthat}]{style="color: #990000"}
    -   [{{]{style="color: goldenrod"}[pytest](https://docs.pytest.org/en/7.4.x/){style="color: goldenrod"}[}}]{style="color: goldenrod"} - It scales down, being super easy to use, but scales up, with mighty features and a rich ecosystem of plugins.
        -   Doesn't add the entry point directory to `sys.path`. However, you can [force it to do so with configuration.](https://docs.pytest.org/en/7.0.x/reference/reference.html#confval-pythonpath) (See [Make your Python life easier by learning how imports find things](https://www.bitecode.dev/p/making-your-python-life-easier-by) about entry points)
    -   [{{]{style="color: goldenrod"}[tox](https://pypi.org/project/tox/){style="color: goldenrod"}[}}]{style="color: goldenrod"} and [{{]{style="color: goldenrod"}[nox](https://nox.thea.codes/en/stable/index.html){style="color: goldenrod"}[}}]{style="color: goldenrod"} - Useful to run tests on different versions of Python to be sure it works with all of them. Both are good but nox is recommended

## Assertive Testing {#sec-code-test-assert .unnumbered}

-   Testing that happens within the function

-   Check for NAs in column

    ``` r
    if (anyNA(dataset$body_mass_g)) {
      rlang::abort("NAs are present in 'body_mass_g' column")
    }
    ```

-   Assert that I have not inadvertently changed the length of the output dataset either by accidentally dropping rows or accidentally introducing duplicates

    ``` r
    library(testthat)
    make_my_rectangle <- function(dataset_a, dataset_b, dataset_c) {

      ... Do stuff

      expect_equal(nrow(output_dataset), nrow(dataset_a))
      expect_false(any(duplicated(output_dataset$id)))

      output_dataset
    }
    ```
