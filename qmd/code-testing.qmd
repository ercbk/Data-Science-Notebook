# Testing {#sec-code-test .unnumbered}

## Misc {#sec-code-test-misc .unnumbered}

-   If the code is for a specific dataset/pipeline, then assertive testing makes more sense than traditional software testing.
-   If the code is general purpose, it should be in a package undergo traditional software testing
-   Also see
    -   [Package Development \>\> Testing](package-development.qmd#sec-pkgdev-test){style="color: green"}
-   Packages
    -   [{]{style="color: #990000"}[ensure](https://simonpcouch.github.io/ensure/){style="color: #990000"}[}]{style="color: #990000"} - A RStudio addin for drafting [{testthat}]{style="color: #990000"} unit testing code using LLMs
        -   Triggering the addin will open a corresponding test file and begin writing tests into it.
    -   [{]{style="color: #990000"}[assertthat](https://github.com/hadley/assertthat){style="color: #990000"}[}]{style="color: #990000"}
    -   [{testthat}]{style="color: #990000"}
    -   [{{]{style="color: goldenrod"}[pytest](https://docs.pytest.org/en/7.4.x/){style="color: goldenrod"}[}}]{style="color: goldenrod"} - It scales down, being super easy to use, but scales up, with mighty features and a rich ecosystem of plugins.
        -   Doesn't add the entry point directory to `sys.path`. However, you can [force it to do so with configuration.](https://docs.pytest.org/en/7.0.x/reference/reference.html#confval-pythonpath) (See [Make your Python life easier by learning how imports find things](https://www.bitecode.dev/p/making-your-python-life-easier-by) about entry points)
    -   [{{]{style="color: goldenrod"}[tox](https://pypi.org/project/tox/){style="color: goldenrod"}[}}]{style="color: goldenrod"} and [{{]{style="color: goldenrod"}[nox](https://nox.thea.codes/en/stable/index.html){style="color: goldenrod"}[}}]{style="color: goldenrod"} - Useful to run tests on different versions of Python to be sure it works with all of them. Both are good but nox is recommended

## Assertive Testing {#sec-code-test-assert .unnumbered}

-   Testing that happens within the function

-   Check for NAs in column

    ``` r
    if (anyNA(dataset$body_mass_g)) {
      rlang::abort("NAs are present in 'body_mass_g' column")
    }
    ```

-   Assert that I have not inadvertently changed the length of the output dataset either by accidentally dropping rows or accidentally introducing duplicates

    ``` r
    library(testthat)
    make_my_rectangle <- function(dataset_a, dataset_b, dataset_c) {

      ... Do stuff

      expect_equal(nrow(output_dataset), nrow(dataset_a))
      expect_false(any(duplicated(output_dataset$id)))

      output_dataset
    }
    ```

-   Error functions

    -   Too much error code within a function reduces readability. Using functions reduces the lines of code and is reusable.

    -   Tidyverse recommends using `cli::abort`

        -   Makes it easy to generate bulleted lists.
        -   Uses glue style interpolation to insert data into the error.
        -   Supports a wide range of [inline markup](https://cli.r-lib.org/reference/inline-markup.html).
        -   Provides convenient tools to [chain errors together](https://rlang.r-lib.org/reference/topic-error-chaining.html).
        -   Can control the [name of the function](https://rlang.r-lib.org/reference/topic-error-call.html) shown in the error.

    -   [Example]{.ribbon-highlight}: From [link](https://www.njtierney.com/post/2023/12/06/long-errors-smell/)

        ``` r
        check_if_squarable <- function(x,
                                       arg = rlang::caller_arg(x),
                                       call = rlang::caller_env()) {
          x_len <- length(x)
          dims <- sqrt(x_len)

          squarable_length <- floor(dims) == dims

          if (!squarable_length) {
            cli::cli_abort(
              message = c(
                "Provided vector is not of a squarable length",
                "{.arg {arg}} is of length {.num {x_len}}",
                "This cannot be represented as a perfect square"
              ),
              call = call
            )
          }
        }

        check_if_not_numeric <- function(x,
                                         arg = rlang::caller_arg(x),
                                         call = rlang::caller_env()) {
          if (!is.numeric(x)) {
            cli::cli_abort(
              message = c(
                "Provided vector, {.arg {arg}}, must be {.cls numeric}, not {.cls {class(x)}}",
                "We see that {.run is.numeric({.arg {arg}})} returns {.cls {class(x)}}"
              ),
              call = call
            )
          }

        }

        # Messages
        vector_to_square(data = 1:4)
        #>      [,1] [,2]
        #> [1,]    1    2
        #> [2,]    3    4
        vector_to_square(data = 1:5)
        #> Error in `vector_to_square()`:
        #> ! Provided vector is not of a squarable length
        #> `data` is of length 5
        #> This cannot be represented as a perfect square
        vector_to_square(data = LETTERS[1:4])
        #> Error in `vector_to_square()`:
        #> ! Provided vector, `data`, must be <numeric>, not <character>
        #> We see that `` is.numeric(`data`) `` returns <character>
        ```

        -   Adding `rlang::call_env` makes it so when the error is tripped, the error message refers to the function and not the error function.
        -   Adding `rlang::call_arg` makes it so when the error is tripped, the error message states the function's argument and not "x"
