# NoSQL {#sec-db-nosql .unnumbered}

## Misc {#sec-db-nosql-misc .unnumbered}

-   High-Performance data ingestion and retrieval for specific applications, especially with structured or semi-structured data.
    -   Data lakes can also store semi-structured data, but they don't have the responsiveness (i.e. low latency, reading, writing) for apps, etc.
    -   NoSQL dbs can be specialized for particular tasks like social media, email, gaming, etc.
-   Applications (Google Gemini)
    -   [Data Analytics]{.underline}: For real-time log monitoring, frequent analysis, smaller datasets, and short term to medium term storage. For long-term storage, a data lake would be a better choice.
    -   [Caching]{.underline}: Due to their high speed and low latency, they are perfect for caching frequently accessed data, significantly improving application performance. Popular use cases include caching user sessions, search results, and product information in e-commerce platforms.
    -   [Session Management]{.underline}: In web applications, they efficiently store user session data, shopping carts, and temporary preferences. This enables seamless user experience and personalization across sessions.
    -   [IoT and Real-time Data]{.underline}: Sensors and devices in IoT ecosystems generate large volumes of real-time data. These types of dbs excel at capturing and storing sensor readings, timestamps, and device states, offering real-time insights and analytics.
    -   [Gaming and Leaderboards]{.underline}: Prominent use in online gaming for storing player profiles, high scores, and game state information. Their fast retrieval and update capabilities ensure smooth gameplay and accurate leaderboards.
    -   [Social Media and Messaging]{.underline}: Storing user profiles, connections, messages, and notifications benefits greatly from the scalability and efficient retrieval. This enables handling millions of users and delivering real-time interactions.
    -   [Authentication and Authorization]{.underline}: Securel storage of user credentials, session tokens, and access control information. This enables efficient user authentication and authorization, securing access to sensitive data and functionalities.
    -   [Configuration Management]{.underline}: Storing application configuration settings, API keys, and environment variables in a key-value store simplifies management and deployment. This allows for dynamic configuration changes and simplifies scaling processes.
-   After MongoDB’s license change to SSPL, many cloud providers opted to offer older versions of MongoDB. As a result, availability of features won't be consistent across cloud service providers.

## Brands

-   ScyllaDB, Cassandra, MongoDB, DynamoDB
-   Google Firestore
    -   Highly scalable and serverless NoSQL document database
    -   [Docs](https://cloud.google.com/products/firestore), [{]{style="color: #990000"}[frstore](https://github.com/Presage-Group/frstore){style="color: #990000"}[}]{style="color: #990000"}
    -   MongoDB compatibility
    -   Build powerful generative AI applications and Retrieval-Augmented Generation (RAG) architectures with Firestore vector search, LangChain and Llamaindex.
    -   By leveraging Firestore as a scalable vector database, you can store embeddings and contextual data enabling efficient semantic search to retrieve relevant information based on user queries. 
    -   Personalization: Enables effortless management of diverse user data from your key channels (CRM, Web, Mobile), seamlessly integrating profiles, preferences, and activities.
