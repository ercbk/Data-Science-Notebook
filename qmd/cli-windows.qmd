# Windows {#sec-cli-win .unnumbered}

## Powershell {#sec-cli-win-powsh .unnumbered}

-   [Misc]{.underline}

    -   [Docs](https://learn.microsoft.com/en-us/powershell/scripting/how-to-use-docs?view=powershell-7.4), [Sample Scripts](https://learn.microsoft.com/en-us/powershell/scripting/samples/sample-scripts-for-administration?view=powershell-7.4)
    -   `Use Get-Help <cmdlet-name>`Â to access help information for specific cmdlets.

-   `$_` ([Docs](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_psitem?view=powershell-7.4))

    -   Automatic Variable; Alias for \$PSItem
        -   [Docs](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.4) for automatic variables
    -   Useful for looping through objects in a directory. See "Change Name (or Extensions) of Multiple Files" for an example of usage
    -   Get the properties of an object
        -   [Example]{.ribbon-highlight}: Using `Get-ItemProperty` ([Docs](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-itemproperty?view=powershell-7.4))

            ``` powershell
            Get-ItemProperty scrapsheet.txt | Format-List
            ```

            -   Property names will be on the left side of the output

        -   [Example]{.ribbon-highlight}: Using `Get-Member` ([Docs](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-member?view=powershell-7.4))

            ``` powershell
             Get-ChildItem *.txt | Select-Object -First 1 | Get-Member
            ```

            -   Selects the first text file in the directory and gets the Properties and a bunch of other stuff like **methods** which also can be used with `$_`
            -   Descriptions are awful for a lot of the stuff, but for the most part, you can guess what the property is.
    -   Some properties that can be used with `$_`
        -   File System Objects:
            -   `.Name`: Returns the name component of a file
            -   `.FullName`: Returns the full path of the file.
            -   `.Length`: Returns the size of the file in bytes.
            -   `.CreationTime`: Returns the date and time the file was created.
            -   `.LastWriteTime`: Returns the date and time the file was last modified.
            -   `.IsReadOnly`: Returns `$true` if the file is read-only, `$false` otherwise.
        -   Process Objects:
            -   `.Id`: Returns the unique identifier (PID) of the process.
            -   `.Name`: Returns the name of the process.
            -   `.MainWindowTitle`: Returns the title of the process's main window (if applicable).
            -   `.WorkingDirectory`: Returns the working directory of the process.
            -   `.CPU`: Returns the CPU usage of the process.
        -   Registry Objects:
            -   `.Name`: Returns the name of the registry key.
            -   `.Hive`: Returns the hive of the registry key (e.g., `HKLM`, `HKCU`).
            -   `.Value`: Returns the value of the registry key (if applicable).
            -   `.Path`: Returns the full path of the registry key.

-   [Comments]{.underline}: `<# comment #>`

-   [Change directories]{.underline}

    ``` powershell
     Set-Location "Documents\R\Projects"
    ```

-   [Create a New Folder]{.underline}

    ``` powershell
     New-Item -ItemType Directory -Path "Folder Name"
    ```

    -   Assumes you're already in the directory that you want the folder in. You can also use a path, e.g. `"C:\Temp\Documents\New Folder\Subfolder1\\Subfolder2"`.

-   [Change Name of File]{.underline}

    ``` powershell
    Rename-Item -Path "c:\logfiles\daily_file.txt" -NewName "monday_file.txt"
    ```

-   [Change Name (or Extensions) of Multiple Files]{.underline}

    ``` powershell
    Get-ChildItem *.md | Rename-Item -NewName { $_.Name -replace '.md','.qmd' }
    ```

    -   `Get-ChildItem`: cmdlet gets all the files in the current folder that have a .mc file extension
    -   Results piped to `Rename-Item`
        -   [NewName]{.arg-text}: Has a value that's a script block that runs before the value is submitted to the NewName parameter.
            -   [\$\_]{.arg-text}: (automatic variable) It represents each file object as it comes to the command through the pipeline.
            -   [-replace]{.arg-text}: Operator replaces the file extension of each file with .qmd.
                -   Notice that matching using the [-replace]{.arg-text} operator is not case sensitive.

-   [Execute a File]{.underline}

    ``` powershell
    Invoke-Item configuration.cmd
    ```

-   [Multi-line Commands]{.underline}

    ``` powershell
    ffmpeg -i input.mkv -map 0:v:0 `
           -map 0:a:2 -map 0:a:0 -map 0:a:1 -map 0:a:3 `
           -map 0:s -c copy `
           -disposition:a:0 default `
           reordered.mkv
    ```

    -   In bash, it's a backslash (\\), but in Powershell, it's a backtick ( \` )

    -   \*Don't forget that there's a space between the last character and the backtick.\*

    -   In practice, this will look like

        ``` powershell
        ffmpeg -i .input.mkv -map 0:v:0 `
        >> -map 0:a:2 -map 0:a:0 -map 0:a:1 -map 0:a:3 `
        >> -map 0:s -c copy `
        >> -disposition:a:0 default `
        >> reordered.mkv
        ```

-   [String Matching]{.underline}

    -   Print line with pattern

        ```         
        Select-String -Path "file*.txt" -Pattern "error"
        file1.txt:3:This is the error line of the file
        file2.txt:3:This is the error line of the file
        file3.txt:3:This is the error line of the file
        ```

        -   Matches the 3rd line of each file

-   Get stats on a process

    ``` powershell
    Get-Process -Name chrome
    ```

    -   Handles: The number of handles that the process has opened.
    -   NPM(K): The amount of non-paged memory that the process is using, in kilobytes.
    -   PM(K): The amount of pageable memory that the process is using, in kilobytes.
    -   WS(K): The size of the working set of the process, in kilobytes. The working set consists of the pages of memory that were recently referenced by the process.
    -   VM(M): The amount of virtual memory that the process is using, in megabytes. Virtual memory includes storage in the paging files on disk.
    -   CPU(s): The amount of processor time that the process has used on all processors, in seconds.
    -   ID: The process ID (PID) of the process.
    -   ProcessName: The name of the process. For explanations of the concepts related to processes, see the Glossary in Help and Support Center and the Help for Task Manager.

-   [Environment Variables]{.underline}

    -   Set an environment variable

        ``` powershell
        Set-Item -Name PYTHONSTARTUP -Value C:\path\to\pythonstartup.py
        ```

        -   Same expression to modify existing environment variable

        -   Or

            ``` powershell
            $env:QUARTO_DENO_EXTRA_OPTIONS = "--v8-flags=--max-old-space-size=8192"
            ```

    -   Delete environment variable

        ``` powershell
        Remove-Item -Name <variable_name>
        ```

    -   Verify value of an environment variable

        ``` powershell
        $env:<variable_name>
        ```

-   [Ports]{.underline}

    -   Find application using a port.

        ``` powershell
        netstat -aon | findstr ':80'
        netstat -anp | find ":80"
        ```

        -   If port 80 is being used by the application, it will return a PID. Then you can find it in Task Manager \>\> Processess

    -   List all Listening and Established ports

        ``` powershell
        netstat -anob
        ```

    -   Check for processes using a port

        ``` powershell
        Get-Process -Id (Get-NetTCPConnection -LocalPort 80).OwningProcess
        ```

    -   Test connection to local port to see if it's open

        ``` powershell
        Test-NetConnection -ComputerName localhost -Port 80 | Select-Object TcpTestSucceeded
        ```

    -   Check firewall settings for an app

        ``` powershell
        netsh advfirewall firewall show rule name="name_of_app"
        ```

## Batch Scripting {#sec-cli-win-batscri .unnumbered}

-   Misc

    -   Resources
        -   [Windows Batch Scripting](https://en.wikibooks.org/wiki/Windows_Batch_Scripting)
    -   To keep the prompt window open after script execution, place these either of these commands at end of your script.
        -   `pause`: Keeps window open until you press any key.
        -   Via timer: e.g. `timeout /t 300`
        -   `cmd /k`: The prompt will remain active and you can execute additional commands manually.

-   [Example]{.ribbon-highlight}: Create variables and execute

    ``` bash
    @echo off

    rem Set the path to the Rscript executable
    set RSCRIPT="C:\Users\user\AppData\Local\Programs\R\R-4.2.3\bin\Rscript.exe"

    rem Set the path to the R script to execute
    set RSCRIPT_FILE="C:\Users\user\my_r_script.R"

    rem Execute the R script
    %RSCRIPT% %RSCRIPT_FILE%

    rem Pause so the user can see the output
    exit
    ```

    -   `@echo off` - This line turns off the echoing of commands in the command prompt window, making the output cleaner.
    -   `rem` - Keyword that denotes a comment in a batch file.
    -   `set RSCRIPT=` - This line assigns the path to the Rscript executable to the environment variable RSCRIPT.
    -   `set RSCRIPT_FILE=` - The path to the R script file is assigned to the environment variable RSCRIPT_FILE.
    -   `%RSCRIPT% %RSCRIPT_FILE%` - Executes the R script using the Rscript executable and passes the path to the R script file as an argument.
    -   `exit` - This command exits the batch file and closes the command prompt window.

-   [Example]{.ribbon-highlight}: Exit if script errors

    ``` bash
    Rscript "C:\Users\ercbk\Documents\R\Projects\Indiana-COVID-19-Tracker\R\collection\build-opentab-dat.R"

    REM if the data building script errors, bat script terminates without running other scripts or commands
    if %errorlevel% neq 0 exit /b %errorlevel%

    cd "C:\Users\ercbk\Documents\R\Projects\Indiana-COVID-19-Tracker"

    git add data/YoY_Seated_Diner_Data.csv
    git commit -m "opentab data update"
    git pull
    git push

    EXIT
    ```

## WSL {#sec-cli-win-wsl .unnumbered}

-   Resources
    -   [Docs](https://learn.microsoft.com/en-us/windows/wsl/basic-commands)
    -   To update password ([link](https://learn.microsoft.com/en-us/windows/wsl/setup/environment#set-up-your-linux-username-and-password)) using username
-   Load Linux: `wsl -d Ubuntu-22.04` where -d is for --distribution
-   WSL Help: `wsl --help`
-   Exit linux terminal back to command prompt or powershell: `exit`Â 
