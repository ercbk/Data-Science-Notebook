# Renv {#sec-renv- .unnumbered}

## Misc {#sec-renv-misc .unnumbered}

-   [Docs](https://rstudio.github.io/renv/)
-   See Caveats [page](https://rstudio.github.io/renv/articles/renv.html#caveats) in the docs lists for things that renv does not cover.
    -   R version, Pandoc, Operating system, versions of system libraries, compiler versions
    -   Potential solutions for packages like [{sf}]{style="color: #990000"} versions that require certain versions of system libraries
        -   Need to store docker images with all the libraries associated with them. ([Thread](https://mastodon.social/@eddelbuettel/112671629388329644))
        -   Explicitly install sf from source and from CRAN. This will be recorded in the lockfile and the next time you \`renv::restore()\` your project, only sf and its dependencies will be re-compiled. ([Thread](https://fosstodon.org/@eliocamp@mastodon.social/112674649534386956))
-   Packages
    -   [{]{style="color: #990000"}[tugboat](https://www.dmolitor.com/tugboat/){style="color: #990000"}[}]{style="color: #990000"} - Generates a Dockerfile and corresponding Docker image from an analysis directory.
        -   Uses renv to automatically detect all the packages necessary to replicate your analysis and will generate a Dockerfile that contains an exact copy of your entire directory with all the packages installed.
    -   [{]{style="color: #990000"}[rv](https://a2-ai.github.io/rv-docs/){style="color: #990000"}[}]{style="color: #990000"} - Alternative to [{renv}]{style="color: #990000"}, written in Rust, similar to [{uv}]{style="color: goldenrod"}
        -   Articles
            -   [Managing project-specific R libraries with rv](https://tomsing1.github.io/blog/posts/rv/)
        -   Comparison
            -   Package Management
                -   renv - Records the versions and source URLs of each retrieved package in its renv.lock file. This file can be used to recreate the environment on a different system, as long as the packages remain available under the same URLs.
                -   rv - Versions are entirely dictated by the available repositories, which are searched in the order they are listed. In other words, instead of specifying the desired version separately for each R package, users can specify a *snapshot* or an entire repository.
                    1.  Users add CRAN-style repositories to the `rproject.toml` file.
                    2.  Users specify which packages to install.
                    3.  `rv sync` reads the `rproject.toml` file and installs the R packages, thus synchronizing the environment with its description in the configuration file.
            -   System Dependencies:
                -   renv - Not tracked or managed
                -   rv - Can be listed in `sysdeps`
-   Bruno Rodrigues posts on reproducibility
    -   [MRAN is getting shutdown - what else is there for reproducibility with R, or why reproducibility is on a continuum?](https://www.brodrigues.co/blog/2023-01-12-repro_r/)
        -   tl;dr:
            -   I want to start a project and make it reproducible.
                -   [{renv}]{style="color: #990000"} and Docker ([Vignette](https://rstudio.github.io/renv/articles/docker.html))
            -   There's an old script laying around that I want to run.
                -   [{groundhog}]{style="color: #990000"} and Docker
            -   I want to work inside an environment that enables me to run code in a reproducible way.
                -   Docker and the Posit CRAN mirror.
    -   [Code longevity of the R programming language](https://www.brodrigues.co/blog/2022-12-21-longevity/)
-   Alternatives
    -   [GNU Guix](https://hpc.guix.info/blog/2022/12/cran-a-practical-example-for-being-reproducible-at-large-scale-using-gnu-guix/)
        -   See Bruno's "MRAN is getting shutdown - what else is there for reproducibility with R, or why reproducibility is on a continuum?" post for his thoughts
-   [Posit Package Manager](https://packagemanager.posit.co/client/#/) - Helps you install binary packages from a certain date
    -   Notes from [Ease renv::restore() by updating your repository to Posit Public Package](https://www.pipinghotdata.com/posts/2024-09-16-ease-renvrestore-by-updating-your-repositories-to-p3m/) Manager

    -   e.g. Adding to .Rprofile "`options(repos = c(CRAN = "https://packagemanager.posit.co/cran/2024-02-06"))`

        -   Might be able to keep a separate .Rprofie in the project directory.

    -   Always installing package binaries from [Posit Package Manager](https://packagemanager.posit.co/) can help reduce reproducibility errors when it comes to restoring a project.

        -   When {renv} attempts to install that older package from CRAN, the packages will likely have to compile from source which takes longer and may fail for various reasons.

    -   Update the repositories specified in the `renv.lock`

        ``` r
        renv::lockfile_modify(repos = c(
          P3M = "https://packagemanager.posit.co/cran/latest"
          )) |> 
          renv::lockfile_write()
        ```

        -   The P3M url specified here works for both macOS and Windows (not Linux).
        -   Can also include other repos
            -   R-Universe: `ropensci = "https://ropensci.r-universe.dev",`
            -   Company/Organization: `org_rspm = "http://rspm.xxxx.org/xxxREPO/latest"`
-   Install from github: `renv::install("eddelbuettel/digest")`
-   `lockfile_validate` ([Docs](https://rstudio.github.io/renv/reference/lockfile_validate.html))
    -   Validates against a json schema.
    -   Good if your project has custom lockfile requirements
    -   You can add the lockfile schema used by lockfile_validate() into your positron settings and get a nice hover help, descriptions, and validation right in your IDE for your lockfile ([Thread](https://bsky.app/profile/jrdnbradford.bsky.social/post/3lp3mhecros2a))
-   Profiles
    -   A profile can be thought of as a different mode in which a project is used. For example:
        -   A “development” profile might be used when developing and testing a project,

        -   A “production” profile might be used for production deployments,

        -   A “shiny” profile might be used when running the Shiny application.
    -   [Docs](https://rstudio.github.io/renv/articles/profiles.html), [Example](https://github.com/zkamvar/renv-profile-example)

## Activating/Restoring a Project {#sec-renv-actrest .unnumbered}

-   Misc
    -   \*\* Restoring an environment comes with a few [caveats](https://rstudio.github.io/renv/articles/renv.html#caveats): \*\*
        -   First of all, renv does not install a different version of R if the recorded and current version disagree. This is a manual step and up to the user.
            -   [{]{style="color: #990000"}[rig](https://github.com/r-lib/rig){style="color: #990000"}[}]{style="color: #990000"} can make switching between R versions easy
            -   Open RStudio with the correct version of R that's listed in the renv.lock file: `rig rstudio path/to/renv.lock`
        -   The same is true for packages with external dependencies. Those libraries, their headers and binaries also need to be installed by the user in the correct version, which is *not* recorded in the lockfile.
        -   Furthermore renv supports restoring packages installed from git repositories, but fails if the user did not install git beforehand.
    -   <https://rstudio.github.io/renv/articles/faq.html#im-returning-to-an-older-renv-project-what-do-i-do>
-   Init steps (updates lockfile to either latest pkg versions or what you have locally)
    1.  Run `renv::init()`
    2.  Choose "Discard the lockfile and re-initialize the project"
-   Restore steps (looking to reproduce the original project results)
    1.  Run `renv::restore()`
    2.  Update any packages with outside dependencies
        -   RMarkdown depends on pandoc which is usually installed by installing RStudio. So if you updated RStudio, then the rmarkdown version in the project's lockfile may not work with your current pandoc version. You'll have to update rmarkdown (or revert your pandoc version... shhhyea, as if)
-   Issues
    -   A pkg installation fails (and therefore restore fails) because some pkg requires another pkg to be a more up-to-date version or some other reason
        -   \*\*If it's something with a shit ton of dependencies like rstanarm, you might as well use renv::init( ) method\*\*
        -   Examples:
            -   {pkgload} failed to install because I had rlang v.4.0.6 instead of \> v4.09
            -   {RCurl} failed because it couldn't find some obsure file
        -   Solution (update the package):
            1.  `update("pkg")` (or go to the github and search for the latest stable version) to see what the latest stable version is.
            2.  `renv::modify()` allows you edit the lockfile. Change pkg version in lockfile to that latest version
            3.  `rerun renv::restore()`
            4.  Repeat as necessary

## Installing Fonts {#sec-renv-font .unnumbered}

-   Using a package like extrafont, it won't find any fonts installed so you have to point it to the system path
-   Steps
    1.  Install {systemfonts}
    2.  Run `systemfonts::match_font("<name of font you have installed>")` and copy path (don't include file (i.e. .ttf))
    3.  Run `extrafont::`

## Using Local directory with Package Tarbell to Install a Package {#sec-renv-localtar .unnumbered}

-   Needed to install an old XML package version that wasn't available through CRAN mirror. Errored looking libxml parser. Discussion says you need to use libxml2.

-   Resources

    -   renv using local package directory
        -   https://rstudio.github.io/renv/articles/local-sources.html
    -   Instructions on compiling old XML package with rtools40
        -   https://github.com/r-windows/rtools-installer/issues/3
        -   https://github.com/r-windows/checks/issues/5#issue-335598042
    -   Install libxml2 library
        -   https://github.com/r-windows/docs/blob/master/packages.md#xml
    -   Finding pacman package manager to install libxml2
        -   https://github.com/r-windows/docs/blob/master/rtools40.md#readme

-   In the project directory, create renv/local directory. Then, download/move the package version's tar.gz file to that "local" folder

    ``` r
    > Sys.setenv(LIB_XML = "$(MINGW_PREFIX)")
    > Sys.setenv(LOCAL_CPPFLAGS = "-I/mingw$(WIN)/include/libxml2")
    > install.packages('renv/local/XML_3.99-0.3.tar.gz', repos = NULL, type = 'source')
    ```

## Errors {#sec-renv-err .unnumbered}

-   Fails to retrieve package
    -   Solutions:
        -   Install from github

            ```         
            renv::install("eddelbuettel/digest")
            ```

        -   Revert to previous version

            ``` r
            remotes::install_version("cachem", version = "1.0.3", repos = "http://cran.us.r-project.org")
            renv::install("cachem@1.0.3")
            ```
-   Compiling older packages (e.g. [{gfortran}]{style="color: #990000"}) on Apple Silicon (Mac M1, M2, M3) can result in errors. [{]{style="color: #990000"}[macrtools](https://github.com/coatless-mac/macrtools/){style="color: #990000"}[}]{style="color: #990000"} can help some of them.

## Docker {#sec-renv-docker .unnumbered}

-   Copy renv library into the image ([source](https://bsky.app/profile/blasbenito.com/post/3lgxxzd3joc2f))

    ``` dockerfile
    COPY . .
    RUN R -e "renv::snapshot()" 
    ```

    -   This speeds up the build considerably

    -   Make sure `.dockerignore` does *not* include the renv directory or any subdirectory

    -   Your renv library must not contain any symlinks. Therefore, you need to run this option *before* running `renv::init()`

        ``` r
        options(renv.config.cache.enabled=FALSE)
        ```

    -   Note that `COPY . .` is used which copies the entire directory. So, your `.dockerignore` file should be rigorously managed so that you don't end-up copying a bunch of things from your directory that don't need.
