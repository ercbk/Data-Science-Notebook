# Spatial {#sec-reg-spat .unnumbered}

## Misc {#sec-reg-spat-misc .unnumbered}

-   Packages
    -   [{]{style="color: #990000"}[CARBayesST](https://cran.r-project.org/web/packages/CARBayesST/index.html){style="color: #990000"}[}]{style="color: #990000"} ([Vignette](https://www.jstatsoft.org/article/view/v084i09)) - Spatio-Temporal **Generalised Linear Mixed Models** for Areal Unit Data
        -   Binomial, Gaussian, or Poisson available
    -   [{]{style="color: #990000"}[spatialreg](https://r-spatial.github.io/spatialreg/){style="color: #990000"}[}]{style="color: #990000"} - **OG**; Various methods of spatial **regression**, Bivand's package
        -   Spatial Autoregressive Combined (SAC) models combine both a Spatial Autoregression (SAR) model and a Spatial Error (SEM) model
    -   [{]{style="color: #990000"}[spatemR](https://cran.r-project.org/web/packages/spatemR/index.html){style="color: #990000"}[}]{style="color: #990000"} - **Generalized Spatial Autoregressive** Models for Mean and Variance
        -   Extends classical methods like **logistic** Spatial Autoregresive Models (SAR), **probit** Spatial Autoregresive Models (SAR), and **Poisson** Spatial Autoregresive Models (SAR),
        -   Built on top of [{gamlss}]{style="color: #990000"} so splines can be included.
    -   [{]{style="color: #990000"}[spldv](https://cran.r-project.org/web/packages/spldv/index.html){style="color: #990000"}[}]{style="color: #990000"} - Estimates spatial autoregressive models for **binary dependent variables** using GMM estimators
        -   Computes average marginal effects for probit and logit models
-   Papers
    -   [A Review of Software for Spatial Econometrics in R](https://www.mdpi.com/2227-7390/9/11/1276) (2021)
-   Notes from
    -   Bivand's slides and source code, [Categorical independent variables and spatial regression: interpretation and reporting](https://rsbivand.github.io/eqc25_talk/)
    -   Spatial Data Science, [Ch.16](https://r-spatial.org/book/16-SpatialRegression.html), [Ch.17](https://r-spatial.org/book/17-Econometrics.html)

## Econometric {#sec-reg-spat-econ .unnumbered}

![[source](https://mstdn.social/@geocaruso/114315287372162927)](_resources/Regression-Spatial.resources/econometric-venn-1.png){.lightbox width="532"}

### Misc {#sec-reg-spat-econ-misc .unnumbered}

-   The spatial lag is usually taken as the mean of the values of the variable at neighbouring observations for row-standardised spatial weights, or the sum for binary spatial weights.
-   Relatively dense spatial weights matrices may down-weight model estimates, suggesting that sparser weights are preferable
-   The presence of residual spatial autocorrelation need not bias the estimates of variance of regression coefficients, provided that the covariates themselves do not exhibit spatial autocorrelation
    -   if covariates and the residual are autocorrelated, it is likely that the estimates of variance of regression coefficients will be biased downwards if attempts are not made to model the spatial processes.
-   Recommended to start from the General Nested Model (GNM) and eliminate unneeded terms
-   Common use of pre-test strategies for model selection probably ought to be replaced by the estimation of the most general model appropriate for the relationships being modelled.
-   All covariates should NOT be added in spatially lagged form
-   If the processes in the covariates and the response match, we should find little difference between the coefficients of a least squares and a SEM, but very often they diverge, suggesting that a Hausman test for this condition should be employed.

### Models {#sec-reg-spat-econ-mod .unnumbered}

-   [[{spatialreg}]{.underline}]{style="color: #990000"} [Model Functions]{.underline}\

    | model | model name | maximum likelihood estimation function |
    |------------------------|------------------------|------------------------|
    | SEM | spatial error | `errorsarlm(..., Durbin=FALSE)` |
    | SEM | spatial error | `spautolm(..., family="SAR")` |
    | SDEM | spatial Durbin error | `errorsarlm(..., Durbin=TRUE)` |
    | SLM | spatial lag | `lagsarlm(..., Durbin=FALSE)` |
    | SDM | spatial Durbin | `lagsarlm(..., Durbin=TRUE)` |
    | SAC | spatial autoregressive combined | `sacsarlm(..., Durbin=FALSE)` |
    | GNM | general nested | `sacsarlm(..., Durbin=TRUE)` |

-   **Spatial Lag Model (SLM)** or **Spatial Autoregressive (SAR)**\
    $$
    y = \rho_{\text{lag}}Wy + X\beta + \epsilon
    $$

    -   Includes a spatial process for the response
    -   $y$ : A $n\times 1$ vector of observations on a response variable taken at each of $n$ locations
    -   $\rho_{\text{lag}}$ : Scalar spatial parameter
    -   $W$ : A $n\times n$ spatial weights matrix
    -   $X$ : A $n\times k$ matrix of covariates usually including the intercept
    -   $\beta$ : A $k\times 1$ vector of parameters
    -   $\epsilon$ : A $n\times 1$ vector of iid *disturbances*

-   **Spatial Error Model (SEM)**\
    $$
    \begin{align}
    &y = X\beta + u \\
    &\text{where} \;\; u = \rho_{\text{err}} Wu + \epsilon
    \end{align}
    $$

    -   Includes a spatial process for the residuals
    -   $u$ : A $n\;\times\;1$ spatially autocorrelated disturbance vector
    -   $\rho_{\text{err}}$ : A scalar spatial parameter.

-   **Spatial Durbin Model (SDM)**\
    $$
    y = \rho_{\text{lag}}Wy + X\beta + WX\gamma + \epsilon
    $$

    -   Includes spatial processes for the response and covariates
    -   $WX$ : Is the spatially weighted, lagged covariates term
    -   $\gamma$ : A $k\;' \times 1$ vector of parameters where often $k' = k - 1$ when using row-standardized spatial weights and ommitting the spatially lagged intercept.
    -   The indirect spillover eﬀect produced by the SDM model is both local and global with no prior restrictions on the magnitudes of these eﬀects
    -   The exogenous regressor of one location casts an eﬀect on the dependent variable of the neighboring locations through *feedback loops*.
        -   The feedback loops are a result of the Durbin term due to which a location, say $i$ aﬀects aneighboring location, say $j$, which eventually has a consequence on $i, j = 1,2, \ldots , n$
    -   An advantage of the spatial Durbin model is that it produces correct standard errors or t−values of the coeﬃcient estimates also if the true data generating process is a spatial error model
    -   The SDM model reduces to SEM under a non-linear common factor restriction. Thus, theoretically speaking, the choice between SDM and SEM can be settled by performing astatistical test for the common factor restriction.
    -   Rao’s score test principle which is asymptotically equivalent to the Likelihood Ratio Test (LRT) but computationally much simpler
        -   Use of the likelihood ratio test (LRT) is not attractive for testing a non-linear hypothesis, since LRT requires maximum likelihood estimation both under the null and the alternative hypotheses.

-   **General Nested Model (GNM)** or **General Nested Spatial Model (GNS)**

    $$
    \begin{align}
    &y = \rho_{\text{lag}}Wy + X\beta + WX\gamma + u \\
    &\text{where} \;\; u = \rho_{\text{err}} Wu + \epsilon
    \end{align}
    $$

    -   Includes a spatial process to the response, covariates, and residuals (kitchen sink model)

-   **Combined Spatial Autocorrelation (SAC)**

    $$
    \begin{align}
    &y = \rho_{\text{lag}}Wy + X\beta + u \\
    &\text{where} \;\; u = \rho_{\text{err}} Wu + \epsilon
    \end{align}
    $$

    -   No spatial process for covariates
    -   AKA **Spatial AutoRegressive-AutoRegressive (SARAR)**

-   **Spatially Lagged X Model (SLX)**

    $$
    y = X\beta + WX\gamma + \epsilon
    $$

    -   Only has a spatial process for the covariates

-   **Error Durbin model (SDEM)**

    $$
    \begin{align}
    &y = X\beta + WX\gamma + u \\
    &\text{where} \;\; u = \rho_{\text{err}} Wu + \epsilon
    \end{align}
    $$

    -   No spatial process for the response

### Impacts {#sec-reg-spat-econ-imp .unnumbered}

-   [Types]{.underline}
    -   [**Direct impacts**]{style="color: #009499"} measure the effect of changing an explanatory variable in a specific location on the dependent variable in that same location. This is analogous to traditional regression coefficients but accounts for spatial **feedback effects**.
    -   [**Indirect impacts**]{style="color: #009499"} (aka [**spillover effects**]{style="color: #009499"}) capture how changing an explanatory variable in one location affects the dependent variable in neighboring locations through spatial interdependencies. These effects propagate through the spatial weights matrix.
    -   [**Total impacts**]{style="color: #009499"} are simply the sum of direct and indirect impacts, representing the overall effect of changing a variable across the entire spatial system.
    -   [**Global impacts**]{style="color: #009499"} provide system-wide average measures of direct, indirect, and total effects. They assume that the impact of a variable is *constant* across all spatial units in the model.
        -   Seen as crucial for reporting results from fitting models including the spatially lagged response (SLM, SDM, SAC, GNM), and has been xtended to models with spatially lagged covariates (SLX, SDEM).
    -   [**Local impacts**]{style="color: #009499"} allow these effects to *vary* across different locations. This is particularly relevant in weighted spatial regression and other spatially varying coefficient models, where the relationship between variables can differ across space due to local conditions, policies, or characteristics.
        -   Local impacts may be reported for SDEM and SLX models, using a linear combination to calculate standard errors for the total impacts of each covariate (sums of coefficients on the covariates and their spatial lags)
        -   In Spatial Lag of X (SLX) model or the Spatial Durbin Error Model (SDEM), the influence of a change in an explanatory variable is restricted to a defined neighborhood of the initial location.
        -   The impact does not propagate endlessly throughout the system. This more contained spillover is referred to as a local impact.
    -   [**Feedback Effects**]{style="color: #009499"} are where the initial change in a location influences neighboring locations, which in turn influence the original location back.
-   [Interpretation]{.underline}
    -   **Direct Impacts** represent the average change in the dependent variable at location $i$ from a one-unit change in the explanatory variable at location $i$.
        -   [Example]{.ribbon-highlight}: If the direct impact of [police spending]{.var-text} (in \$1000s) is [0.15]{.arg-text} for [crime]{.var-text} reduction, then a \$1,000 increase in [police spending]{.var-text} in a [city]{.var-text} *reduces* [crime]{.var-text} in that same [city]{.var-text} by [0.15]{.arg-text} units on average.
    -   **Indirect Impacts** represent the average change in the dependent variable at location $i$ from a one-unit change in the explanatory variable at all other locations $j \ne i$.
        -   Remember it's the *average*. The effect on location $i$ from each other location will vary according to spatial relationships encoded in the spatial weights matrix.
        -   A change in city $j$ can affect city $i$ both directly (if they're neighbors) and indirectly through intermediate cities in the spatial network (i.e. the effect generated in other cities spilling over into a city).
        -   [Example]{.ribbon-highlight}: If the indirect impact is [0.08]{.arg-text}, then a $\$1,000$ increase in [police spending]{.var-text} in city $i$ r*educes* [crime]{.var-text} in all other cities by [0.08]{.arg-text} units on average through **spillover effects**.
    -   **Total Impacts** represent the overall effect of a change in an explanatory variable across all locations in the study area. In essence, it captures the entire spatial multiplier effect

## Mixed Effects {#sec-reg-spat-me .unnumbered}

-   Packages
    -   [{]{style="color: #990000"}[hglm](https://cran.r-project.org/web/packages/hglm/index.html){style="color: #990000"}[}]{style="color: #990000"} - Procedures for fitting hierarchical generalized linear models (HGLM).
        -   Linear mixed models and generalized linear mixed models with random effects for a variety of links and a variety of distributions for both the outcomes and the random effects.
    -   [{]{style="color: #990000"}[R2BayesX](https://cran.r-project.org/web/packages/R2BayesX/index.html){style="color: #990000"}[}]{style="color: #990000"} - Estimate structured additive regression (STAR) models with 'BayesX'.
    -   [{]{style="color: #990000"}[INLA](https://www.r-inla.org/home){style="color: #990000"}[}]{style="color: #990000"} - Integrated nested Laplace approximation (INLA) is a method for approximate Bayesian inference.
        -   Alternative to other methods such as Markov chain Monte Carlo because of its speed and ease of use via the R-INLA package.
        -   Although the INLA methodology focuses on models that can be expressed as latent Gaussian Markov random fields (GMRF), this encompasses a large family of models that are used in practice.
    -   glmmTMB uses functions of the distance between observations, and fitted variograms to model the spatial autocorrelation present (haven't found an example using this package)

### Varying Intercepts {#sec-reg-spat-me-vi .unnumbered}

-   Uses a discrete location/id variable as the group variable (i.e. varying intercepts by location).
-   Examples
    -   [Example]{.ribbon-highlight}: Boston Housing Values ([SDS Ch. 16.2](https://r-spatial.org/book/16-SpatialRegression.html#sec-multilevel))

        ::: panel-tabset
        ## [{lme4}]{style="color: #990000"}

        This example shows how to fit the same model with four different packages

        See [Geospatial, Preprocessing \>\> Aggregations \>\> Examples](geospatial-processing.qmd#sec-geo-proc-agg-exs){style="color: green"} \>\> Example 3 for notes on the processing of this dataset.

        [NOX_ID]{.var-text} is the location variable (and grouping variable) for the measured NOX values.

        ``` r
        library(Matrix)
        library(lme4)

        form <- 
          formula(log(median) ~ CRIM + ZN + INDUS + CHAS + 
                  I((NOX*10)^2) + I(RM^2) + AGE + log(DIS) +
                  log(RAD) + TAX + PTRATIO + I(BB/100) + 
                  log(I(LSTAT/100)))

        MLM <- 
          lmer(update(form, . ~ . + (1 | NOX_ID)),
               data = boston_487, 
               REML = FALSE)

        # random effects
        boston_93$MLM_re <- ranef(MLM)[[1]][,1]
        ```

        -   Not sure why [{Matrix}]{#990000 style="\"color:"} needs to be loaded

        ## [{hglm}]{style="color: #990000"}

        ``` r
        library(hglm) |> suppressPackageStartupMessages()
        suppressWarnings(HGLM_iid <- hglm(fixed = form,
                                          random = ~1 | NOX_ID,
                                          data = boston_487,
                                          family = gaussian()))

        # random effects
        boston_93$HGLM_re <- unname(HGLM_iid$ranef)
        ```

        ## [{R2BayesX}]{style="color: #990000"}

        ``` r
        library(R2BayesX) |> suppressPackageStartupMessages()

        BX_iid <- 
          bayesx(update(form, . ~ . + sx(NOX_ID, bs = "re")),
                 family = "gaussian", 
                 data = boston_487,
                 method = "MCMC", 
                 iterations = 12000,
                 burnin = 2000, 
                 step = 2, 
                 seed = 123)
        ```

        ## [{INLA}]{style="color: #990000"}

        ``` r
        library(INLA) |> suppressPackageStartupMessages()

        INLA_iid <- 
          inla(update(form, . ~ . + f(NOX_ID, model = "iid")),
               family = "gaussian", 
               data = boston_487)

        # random effects
        boston_93$INLA_re <- INLA_iid$summary.random$NOX_ID$mean
        ```
        :::

### Spatially Structured Random Effects {#sec-reg-spat-me-ssre .unnumbered}

-   Simultaneous Autoregressive (SAR), Conditional Autoregressive (CAR), and Intrinsic CAR (ICAR) models use spatially structured random effects
    -   SAR, CAR, ICAR, and Leroux models have the same overall model formula but different random effects formulas
-   Model Formula\
    $$
    \begin{align}
    &Y = X \beta + Zu \\
    &\text{where} \;\; u \sim\mathcal{N}(0, \sigma^2_u \; \Sigma)
    \end{align}
    $$
    -   $\sigma^2_u \; \Sigma$ is the variance/covariance matrix of the random effects
-   Random Effects ($u$) Formulas
    -   SAR: $\Sigma^{-1} = (I-\rho W)'\;(I-\rho W)$
        -   $W$ is a non-singular spatial weights matrix
        -   $\rho$ is a spatial correlation parameter
    -   CAR: $\Sigma^{-1} = (I-\rho W)$
        -   $W$ is a symmetric and strictly positive definite spatial weights matrix
    -   ICAR: $\Sigma^-1 = M = \text{diag}(n_i) - W$
        -   $W$ is a symmetric and strictly positive definite spatial weights matrix
    -   Leroux: $\Sigma^{-1} = (I-\rho)I_n + \rho M)$
-   Examples
    -   [Example]{.ribbon-highlight}: Boston Housing Values ([SDS Ch. 16.2](https://r-spatial.org/book/16-SpatialRegression.html#sec-multilevel))

        -   The lower level (census tract) dataset (no aggregation of variables) is used in these models while the neighbor's list/spatial weights object used is created from a higher level geometry ([NOX_ID]{.var-text}) (i.e. the spatial relationship is modeled at the higher level)
        -   Care is needed to match the indexing variable with the spatial weights. The neighbor's list object ([nb_q_93]{.var-text}) needs to get manipulated in some way in all these models in order for the spatial weights object to be in a suitable format for the particular model to accept.

        ::: panel-tabset
        ## [{hglm}]{style="color: #990000"} (CAR)

        See [Geospatial, Preprocessing \>\> Aggregations \>\> Examples](geospatial-processing.qmd#sec-geo-proc-agg-exs){style="color: green"} \>\> Example 3 for notes on the processing of this dataset.

        [NOX_ID]{.var-text} is the location variable (and grouping variable) for the measured NOX values.

        ``` r
        library(spatialreg)
        W <- as(spdep::nb2listw(nb_q_93, style = "B"), "CsparseMatrix")

        form <- 
          formula(log(median) ~ CRIM + ZN + INDUS + CHAS + 
                  I((NOX*10)^2) + I(RM^2) + AGE + log(DIS) +
                  log(RAD) + TAX + PTRATIO + I(BB/100) + 
                  log(I(LSTAT/100)))

        suppressWarnings(
          HGLM_car <- 
            hglm(fixed = form,
                 random = ~ 1 | NOX_ID,
                 data = boston_487,
                 family = gaussian(),
                 rand.family = CAR(D = W))
        )

        # random effects
        boston_93$HGLM_ss <- HGLM_car$ranef[,1]
        ```

        ## [{R2BayesX}]{style="color: #990000"} (ICAR)

        ``` r
        library(R2BayesX)

        RBX_gra <- R2BayesX::nb2gra(nb_q_93)
        all.equal(row.names(RBX_gra), attr(nb_q_93, "region.id"))
        # [1] TRUE

        all.equal(unname(diag(RBX_gra)), spdep::card(nb_q_93))
        # [1] TRUE

        BX_mrf <- 
          bayesx(update(form, . ~ . + sx(NOX_ID, 
                                         bs = "mrf",
                                         map = RBX_gra)), 
                 family = "gaussian", 
                 data = boston_487,
                 method = "MCMC", 
                 iterations = 12000,
                 burnin = 2000, 
                 step = 2, 
                 seed = 123)

        # random effects
        boston_93$BX_ss <- BX_mrf$effects["sx(NOX_ID):mrf"][[1]]$Mean
        ```

        ## [{INLA}]{style="color: #990000"} (ICAR)

        ``` r
        library(INLA) |> suppressPackageStartupMessages()

        ID2 <- as.integer(as.factor(boston_487$NOX_ID))

        INLA_ss <- 
          inla(update(form, . ~ . + f(ID2, 
                                      model = "besag",
                                      graph = W)),
               family = "gaussian", 
               data = boston_487)

        # random effects
        boston_93$INLA_ss <- INLA_ss$summary.random$ID2$mean
        ```

        ## [{INLA}]{style="color: #990000"} (Laroux)

        ``` r
        M <- Diagonal(nrow(W), rowSums(W)) - W
        Cmatrix <- Diagonal(nrow(M), 1) -  M

        INLA_lr <- 
          inla(update(form, . ~ . + f(ID2, 
                                      model = "generic1",
                                      Cmatrix = Cmatrix)),
               family = "gaussian", 
               data = boston_487)

        # random effects
        boston_93$INLA_lr <- INLA_lr$summary.random$ID2$mean
        ```

        ## [{mcgv}]{style="color: #990000"} (ICAR)

        ``` r
        library(mgcv)

        names(nb_q_93) <- attr(nb_q_93, "region.id")
        boston_487$NOX_ID <- as.factor(boston_487$NOX_ID)

        GAM_MRF <- 
          gam(update(form, . ~ . + s(NOX_ID, 
                                     bs = "mrf",
                                     xt = list(nb = nb_q_93))),
              data = boston_487, 
              method = "REML")

        # random effects
        ssre <- 
          predict(GAM_MRF, 
                  type = "terms",
                  se = FALSE)[, "s(NOX_ID)"]

        all(sapply(tapply(ssre, list(boston_487$NOX_ID), c),
                   function(x) length(unique(round(x, 8))) == 1))
        # [1] TRUE

        # return the first value for each upper-level unit
        boston_93$GAM_ss <- aggregate(ssre, list(boston_487$NOX_ID), 
                                      head, n=1)$x
        ```

        -   The upper-level random effects may be extracted by predicting terms
        -   The values in all lower-level tracts belonging to the same upper-level air pollution model output zones are identical
        :::
