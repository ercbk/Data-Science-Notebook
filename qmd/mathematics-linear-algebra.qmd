# Linear Algebra {#sec-math-linalg .unnumbered}

## Misc {#sec-math-linalg-misc .unnumbered}

-   Packages
    -   [{]{style="color: #990000"}[sparsevctrs](https://r-lib.github.io/sparsevctrs/index.html){style="color: #990000"}[}]{style="color: #990000"} - Sparse Vectors for Use in Data Frames or Tibbles
        -   Sparse matrices are not great for data in general, or at least not until the very end, when mathematical calculations occur.
        -   Some computational tools for calculations use sparse matrices, specifically the Matrix package and some modeling packages (e.g., xgboost, glmnet, etc.).
        -   A sparse representation of data that allows us to use modern data manipulation interfaces, keeps memory overhead low, and can be efficiently converted to a more primitive matrix format so that we can let Matrix and other packages do what they do best.
    -   [{]{style="color: #990000"}[quickr](https://github.com/t-kalinowski/quickr){style="color: #990000"}[}]{style="color: #990000"} - R to Fortran Transpiler
        -   Only atomic vectors, matrices, and array are currently supported: [integer]{.arg-text}, [double]{.arg-text}, [logical]{.arg-text}, and [complex]{.arg-text}.

        -   The return value must be an atomic array (e.g., not a list)

        -   Only a subset of Râ€™s vocabulary is currently supported.

            ``` r
            #>  [1] !=        %%        %/%       &         &&        (         *        
            #>  [8] +         -         /         :         <         <-        <=       
            #> [15] =         ==        >         >=        Fortran   [         [<-      
            #> [22] ^         c         cat       cbind     character declare   double   
            #> [29] for       if        ifelse    integer   length    logical   matrix   
            #> [36] max       min       numeric   print     prod      raw       seq      
            #> [43] sum       which.max which.min {         |         ||
            ```

## Resources {#sec-math-linalg-resc .unnumbered}

-   [Crash Course in Matrix Algebra: A Refresher on Matrix Algebra for Econometricians with Implementation in R](https://matrix.svenotto.com/)
-   See Matrix Cookbook pdf in R \>\> Documents \>\> Mathematics
    -   derivatives, inverses, statistics, probability, etc.
-   [Link](http://facweb.cs.depaul.edu/sjost/csc423/documents/matrix-form.htm) - A lot of matrix properties as related to regression, covariance, coefficients, etc.
-   [EBOOK statistical linear algebra: basics, transformations, decompositions, linear systems, regression - Matrix Algebra for Educational Scientists](https://zief0002.github.io/matrix-algebra/index.html)
-   Video Course: [Linear Algebra for Data Science](https://www.youtube.com/playlist?list=PLB3yPBd26tWyDNoUpEGVsyI-sygPLqYa1) - Basics, Least Squares, Covariance, Regression, PCA, SVD
-   [Powered by Linear Algebra: The central role of matrices and vector spaces in data science by Matloff](https://matloff.github.io/WackyLinearAlgebra/Powered-by-Linear-Algebra.pdf)
    -   Delta Method, Regularized Regression, PCA, SVD, Attention

## Matrix Multiplication {#sec-math-linalg-matmult .unnumbered}

![](./_resources/Linear_Algebra.resources/image.png){.lightbox width="532"}

## Matrix Algebra {#sec-math-linalg-matalg .unnumbered}

-   An expected value equation (VC stands for variance-covariance in example) multiplied by a matrix, C.\
    ![](./_resources/Linear_Algebra.resources/1-XO9-uivgoTrBx1l4JHRpGQ.png){.lightbox width="532"}

    -   C is factored out of an expected value as C
    -   C is factored out of a transpose as CT

## Factorization {#sec-math-linalg-fact .unnumbered}

![](./_resources/Linear_Algebra.resources/5-Factorizations.png){.lightbox width="532"}

## Methods {#sec-math-linalg-meth .unnumbered}

### The Moore-Penrose Inverse

-   The Moore-Penrose inverse, often denoted as $A^+$, is a generalization of the ordinary matrix inverse that applies to *any* matrix, even those that are singular (non-invertible) or rectangular. It was independently developed by E.H. Moore and Roger Penrose.
-   [Generalized Inverse]{.underline}
    -   Unlike a regular inverse, which only exists for square, non-singular matrices, the Moore-Penrose inverse exists for all matrices. This is incredibly useful in situations where you have more equations than unknowns (overdetermined systems) or fewer equations than unknowns (underdetermined systems), or when your matrix is singular.
-   [Four Penrose Conditions]{.underline}
    -   The Moore-Penrose inverse $A^+$ of a matrix $A$ is uniquely defined by four conditions:
        1.  $A A^+ A = A$
        2.  $A^+ A A^+ = A^+$
        3.  $(A A^+)^T = A A^+$
        4.  $(A^+ A)^T = A^+ A$
-   [Least Squares Solution]{.underline}
    -   One of its most important applications is in finding the "best fit" (least squares) solution to a system of linear equations $Ax = b$. When an exact solution doesn't exist (e.g., in overdetermined systems), the Moore-Penrose inverse provides the $x$ that minimizes the Euclidean norm of the residual error, $\|Ax - b\|^2$. The solution is given by $x = A^+ b$. If there are multiple solutions (e.g., in underdetermined systems), it provides the solution with the minimum Euclidean norm $\|x\|^2$.
-   [Computation]{.underline}
    -   The most common and robust method for computing the Moore-Penrose inverse is through Singular Value Decomposition (SVD). If $A = U \Sigma V^T$ is the SVD of $A$, then $A^+ = V \Sigma^+ U^T$, where $\Sigma^+$ is obtained by taking the reciprocal of the non-zero singular values in $\Sigma$ and transposing the resulting matrix.
