# Learning Diary

* **2017**
	* Jan - Feb MIT Python Course
	* Mar - June Coursera R DS concentration
	* June - various SQL courses
	* July - Shiny Live Lessons course
	* Aug - Oct - Forecasting Principles and Practice 1st ed
	* Nov - Feb - Github, Reds JAWS project
	* Mar - website design
* **2018**
	* April - twitter bots, calling APIs, pull requests for ggiraph pkg
	* May - July  Forcasting principles and practices 2nd edition
	* July - Sept Grouped and Hierarchical Time Series papers,
	* Sept - network graph building
	* Oct - Feb Discrete Analysis Penn St., Agresti, Friendly
* **2019**
	* Mar - Instrumental Variable models, Mixed Effects models
	* Mar - May Center for Equity, Louisville Metro Department of Corrections data analysis
	* May - Count models, mixture models
	* June - zero-inflated discrete models (mostly Hurdle)
	* July - Boosted GAMs, XGBoost and RF with Bayesian Optimization, DALEX and SHAP
	* Aug - Experimental Design (stepped wedge, randomized complete block)
	* Sept - Distributional trees and Conditional inference trees;
	* Oct - feature engineering; deeper PCA; modular Shiny
	* Nov - Customer Lifetime Value, Collaborative Filtering Recommenders, Cost-Benefit Analysis
	* Dec - Causal Inference, non-linear association metrics
	* Jan - Feb Statistical Rethinking McElreath, Nested Cross Validation
* **2020**
	* Mar Statistical Rethinking (Ch 1-6), Nested Cross Validation (cont)
		* SR: brms
		* NCV: Drake, MLFlow, scikit, AWS, H2O, tidymodels, mlr3
	* Apr-Nov COVID-19 project
		* Scraping: RSelenium, rvest
		* Viz: ggplot2, plotly, flexdashboard, reactable, highchartR
		* MLOps: github actions, task scheduler
* **2021**
	* Jan-May Statististical Rethinking (Ch 1 - 11)
	* Apr Decision Modeling
	* Jun Quasi-experiments, global models for grouped ts, time series feature engineering



**Courses taken**

* A Cloud Guru - Docker Fundamentals https://acloud.guru/learn/docker-fundamentals
* Absolute Beginners Introduction to Amazon Web Services (AWS) https://www.skillshare.com/classes/Absolute-Beginners-Introduction-to-Amazon-Web-Services-AWS/921960604
* 


**Projects**

* All the Nested Cross-Validation: A Comparison between Implementations
	* Lots of tools and dialects in coding so getting familiar with many of them along with writing some useful code was the personal objective of this project.
	* Saw nested-cv mentioned Raschka's twitter feed and became curious. Wanted to know how it worked and whether it was implemented in R.
	* MLR3 and the R6 object oriented programming (OOP) system
		* Always saw interesting things being implemented in mlr packages, so this gave me a chance to use some of their tools and learn the R6 class objects and methods
		* Gaining this familiarity gave me confidence that I could go ahead and try the reticulate/python implementation
	* Python
		* Had translated a twitter bot from python for another project and taken an intro python 2.7 class, but I'd never done any data science stuff in the language, so it was cool to get my hands dirty a little bit the language and the scikit learn library.
	* Tidymodels
		* I'm primarily a tidyverse person, so using these suite of packages are my go-to. It was interesting to see how the rsample, dials, and parsnip models functioned
	* H2O
		* I'd used the package during my LMDC analysis, but not in this capacity. There were some quirks in looping their objects that had to be dealt with. Generating unique grid names quickly was something I learned that seems like it could be useful in the future
	* Results
		* Was surprising to me that
			1. R would be so much faster than Python. 
			2. There seemed to be a lot of overhead for all the grid search functions. Well, except mlr3 evidently.
			3. java-coded H2O didn't win.
			4. mlr3 was so fast




