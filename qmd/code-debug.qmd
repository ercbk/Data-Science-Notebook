# Debugging {#sec-code-debug .unnumbered}

## Misc {#sec-code-debug-misc .unnumbered}

-   Rubber Duck Method
    1.  Beg, borrow, steal, buy, fabricate or otherwise obtain a rubber duck (bathtub variety).\
        -   Note: In a pinch a coworker might be able to substitute for the duck, however, it is often preferred to confide mistakes to the duck instead of your coworker.
    2.  Place rubber duck on desk and inform it you are just going to go over some code with it, if thatâ€™s all right.
    3.  Explain to the duck what your code is supposed to do, and then go into detail and explain your code line by line.
    4.  At some point you will tell the duck what you are doing next and then realise that that is not in fact what you are actually doing. The duck will sit there serenely, happy in the knowledge that it has helped you on your way.
-   [Silver Searcher](https://github.com/ggreer/the_silver_searcher) - Fast code searching tool
    -   Basic usage for debugging: `ag "my error message"`
    -   [Example]{.ribbon-highlight} ([source](https://www.youtube.com/watch?v=8HfGL8fo_58&ab_channel=Pybites))\
        ![](_resources/Code-Debugging.resources/silvser-ex-1.png){.lightbox}
        -   `heroku run` executes a script and the error message has the words "could not be mailed."
        -   From your local project directory, `ag` takes that message string as input and outputs the paths to the files with that string and the line of code with line number.

## R {#sec-code-debug-r .unnumbered}

-   Functions (From userR 2024, need to get link or person)\
    ![](_resources/Code-Debugging.resources/funs-to-debug-code-1.png){.lightbox width="732"}

## Python {#sec-code-debug-py .unnumbered}

-   `breakpoint` ([Docs](https://docs.python.org/3/library/pdb.html))
    -   Place function on the line above the line that you think is causing the error
    -   [Example]{.unnumbered} ([source](https://www.youtube.com/watch?v=8HfGL8fo_58&ab_channel=Pybites))
        -   Add `breakpoint` to script\
            ![](_resources/Code-Debugging.resources/py-breakpoint-1.png){.lightbox}
            -   Error from the `except` line was tripped, so the problem must be in the `try` chunk
            -   The problem isn't `print` or `sleep`, so `breakpoint` is placed above the `send_message_as_pybites` function
        -   Rerun script that gave the error\
            ![](_resources/Code-Debugging.resources/py-breakpoint-list-1.png){.lightbox}
            -   The line below the `breakpoint` function is returned and PDP (Python DeBugger) is opened
            -   `l` or `list` command returns 11 lines around the returned line which is `send_message_as_pybites` (the arrow marks where the returned line is)
        -   Step into the function\
            ![](_resources/Code-Debugging.resources/py-breakpoint-step-1.png){.lightbox width="632"}
            -   Since the line below the `breakpoint` is a function, you can used `s` or `step` to "step" into that function and look at its code.
            -   The output shows us it is now in the `utils.py` file
            -   Now, using the command `l` again shows 11 lines around the function definition line
        -   Use `next` to execute the next line of code\
            ![](_resources/Code-Debugging.resources/py-breakpoint-next-1.png){.lightbox width="632"}
            -   `n` or `next` executes the next line of code. It can also be used on function calls. While `step` goes to the function, `next` just executes the line.
            -   Using `l` again shows 11 lines around the current line and allows you to see where you are in the scipt.
