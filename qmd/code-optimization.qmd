# Code, Optimization

TOC

* Misc
* Benchmarking
* Profiling
* Replacements for Tidyverse Functions



Misc

* A **while** loop is faster than a recursive function
* **ungroup** before performing calculations in mutate or summarize when that calculation doesn't need to be performed within-group (i.e. per factor level)
* String functions
	* “fixed” searches, `fixed = TRUE` are fastest overall
		* Searches involving fixed strings (e.g. "banana") that don't require regular expressions
	* PCRE2, `perl = TRUE` , is fastest for regular expressions



Benchmarking

* Misc
	* Mastering Software Development in R, Ch. [2.71](https://bookdown.org/rdpeng/RProgDA/profiling-and-benchmarking.html#microbenchmark)
* [{]{style='color: #990000'}[bench](https://bench.r-lib.org/){style='color: #990000'}[}]{style='color: #990000'}
	* Misc
		* Automatically checks that each approach gives the same output, so that you don’t mistakenly compare apples and oranges
	* [Example]{.ribbon-highlight}: Basic

```
res <-
  bench::mark(
    approach_1 = Reduce(sum, numbers),
    approach_2 = sum(unlist(numbers))
  )

res %>% select(expression, median)

#> # A tibble: 2 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 approach_1  2.25µs
#> 2 approach_2 491.97ns
```

* [{]{style='color: #990000'}[microbenchmark](https://cran.r-project.org/web/packages/microbenchmark/index.html){style='color: #990000'}[}]{style='color: #990000'}
	* [Example]{.ribbon-highlight}: Basic![](./_resources/Code,_Optimization.resources/image.1.png)

```
record_temp_perf <- microbenchmark(find_records_1(example_data, 27), 
                                  find_records_2(example_data, 27))
record_temp_perf

## Unit: microseconds
##                              expr      min      lq      mean  median      uq
##  find_records_1(example_data, 27)  114.574  136.680  156.1812  146.132  163.676
##  find_records_2(example_data, 27) 4717.407 5271.877 6113.5087 5867.701 6167.709
##        max neval
##    593.461  100
##  11334.064  100

library(ggplot2)
autoplot(record_temp_perf)
```

* Default: 100 iterations
* Times are given in a reasonable unit, based on the observed profiling times (units are given in microseconds in this case).
* Output
	* min - min time
	* lq - lower quartile
	* mean, median
	* uq - upper quartile
	* max - max time



Profiling

* Misc
	* Resources
		* Mastering Software Development in R, Ch. [2.72](https://bookdown.org/rdpeng/RProgDA/profiling-and-benchmarking.html#profvis)
		* Advanced R, Ch. [23](https://adv-r.hadley.nz/perf-measure.html)
* [{]{style='color: #990000'}[profvis](https://rstudio.github.io/profvis/){style='color: #990000'}[}]{style='color: #990000'}
	* [Example]{.ribbon-highlight}: Basic![](./_resources/Code,_Optimization.resources/image.png)

```
step_1 <- function() {
  pause(1)
}
step_2 <- function() {
  pause(2)
}
slow_function <- function() {
  step_1()

  step_2()

  TRUE
}
result <- profvis(slow_function())
result
```

* Bottom Row: outermost function
* 2nd Row from the bottom are the functions in the next enviromental layer (e.g. "step\_1" and "step\_2")
	* "step\_2" takes about 2/3 of the total function execution time or twice the execution time of "step\_1"
* 3rd Row from the bottom (top row) are the functions in each of those other functions
	* "pause" in "step\_2" takes about 2/3 of the total function execution time or twice the execution time of "pause" in "step\_1"



Replacements for Tidyverse Functions

* Misc
	* Notes from: [Writing performant code with tidy tools](https://www.tidyverse.org/blog/2023/04/performant-packages/)
		* Also provides links to more [{]{style='color: #990000'}[vctrs](https://vctrs.r-lib.org/){style='color: #990000'}[}]{style='color: #990000'} recipes from their tidymodels github pull requests
	* For code that relies on `group_by()`and sees heavy traffic, see `vctrs::list_unchop()`, `vctrs::vec_chop()`, and `vctrs::vec_rep_each()`.
* **Select**

```
bench::mark(
  dplyr = select(mtcars_tbl, hp),
  `[.tbl_df` = mtcars_tbl["hp"]
) %>%
  select(expression, median)
#> # A tibble: 2 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 dplyr      527.01µs
#> 2 [.tbl_df    8.08µs
```

* winner: base R subsetting

* **Filtering**

```
res <-
  bench::mark(
    dplyr = filter(mtcars_tbl, hp > 100),
    vctrs = vec_slice(mtcars_tbl, mtcars_tbl$hp > 100),
    `[.tbl_df` = mtcars_tbl[mtcars_tbl$hp > 100, ]
  ) %>%
    select(expression, median)
res
#> # A tibble: 3 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 dplyr      289.93µs
#> 2 vctrs        4.63µs
#> 3 [.tbl_df    23.74µs
```

* winner: `vctrs::vec_slice` 

* **Mutating**

```
bench::mark(
  dplyr = mutate(mtcars_tbl, year = 1974L),
  `$<-.tbl_df` = {mtcars_tbl$year <- 1974L; mtcars_tbl}
) %>%
  select(expression, median)

#> # A tibble: 2 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 dplyr      302.5µs
#> 2 $<-.tbl_df  12.8µs
```

* winner: base R assignment

* **Mutate and Relocate**

```
bench::mark(
  mutate = mutate(mtcars_tbl, year = 1974L, .after = make_model),
  relocate = relocate(mtcars_tbl, year, .after = make_model),
  `[.tbl_df` = 
      mtcars_tbl[
        c(left_cols, 
          colnames(mtcars_tbl[!colnames(mtcars_tbl) %in% left_cols])
        )
      ],
  check = FALSE
) %>% 
  select(expression, median)

#> # A tibble: 3 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 mutate        1.2ms
#> 2 relocate    804.3µs
#> 3 [.tbl_df    19.1µs
```

* winner: base R

* **Pull**

```
bench::mark(
  dplyr = pull(mtcars_tbl, hp),
  `$.tbl_df` = mtcars_tbl$hp,
  `[[.tbl_df` = mtcars_tbl[["hp"]]
) %>%
  select(expression, median)

#> # A tibble: 3 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 dplyr      101.19µs
#> 2 $.tbl_df  615.02ns
#> 3 [[.tbl_df    2.25µs
```

* winner: base R bracket subsetting

* **Bind\_\***

```
bench::mark(
  dplyr = bind_rows(mtcars_tbl, mtcars_tbl),
  vctrs = vec_rbind(mtcars_tbl, mtcars_tbl)
) %>%
  select(expression, median)

#> # A tibble: 2 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 dplyr          44µs
#> 2 vctrs        14.3µs

bench::mark(
  dplyr = bind_cols(mtcars_tbl, tbl),
  vctrs = vec_cbind(mtcars_tbl, tbl)
) %>%
  select(expression, median)
#> # A tibble: 2 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 dplyr        60.7µs
#> 2 vctrs        26.2µs
```

* winners: `vctrs::vec_cbind` and `vctrs::vec_rbind`

* **Create Tibble**

```
bench::mark(
  tibble = tibble(a = 1:2, b = 3:4),
  new_tibble_df_list = new_tibble(df_list(a = 1:2, b = 3:4), nrow = 2),
  new_tibble_list = new_tibble(list(a = 1:2, b = 3:4), nrow = 2)
) %>% 
  select(expression, median)
#> # A tibble: 3 × 2
#>  expression          median
#>  <bch:expr>        <bch:tm>
#> 1 tibble            165.97µs
#> 2 new_tibble_df_list  16.69µs
#> 3 new_tibble_list      4.96µs
```

* winner: `new_tibble_list`

* **Joins**
	* Questions:
		* If this join happens multiple times, is it possible to express it as one join and then subset it when needed?
			* i.e. if a join happens inside of a loop but the elements of the join are not indices of the loop, it’s likely possible to pull that join outside of the loop and then `vctrs::vec_slice()` its results inside of the loop.
			Am I using the complete outputted join result or just a portion?
				If I end up only making use of column names, or values in one column (as with joins approximating [lookup tables](https://adv-r.hadley.nz/subsetting.html?q=lookup#lookup-tables)), or pairings between two columns, I may be able to instead use `$.tbl_df` or `[.tbl_df` (see above, Pull).
				
		For problems even a little bit more complex, e.g. if there were possibly multiple matching or if I wanted to keep all rows, then expressing this join with more bare-bones operations quickly becomes less readable and more error-prone. In those cases, too, joins in dplyr have a relatively small amount of overhead when compared to the vctrs backends underlying them. So, optimize carefully.
		
		Example: `inner_join` vs `vctrs::vec_slice` (Note: \*only 0 or 1 match possible\*)
		

```
supplement_my_cars <- function() {
  # locate matches, assuming only 0 or 1 matches possible
  loc <- vec_match(my_cars$make_model, mtcars_tbl$make_model)

  # keep only the matches
  loc_mine <- which(!is.na(loc))
  loc_mtcars <- vec_slice(loc, !is.na(loc))

  # drop duplicated join column
  my_cars_join <- my_cars[setdiff(names(my_cars), "make_model")]
  vec_cbind(
    vec_slice(mtcars_tbl, loc_mtcars),
    vec_slice(my_cars_join, loc_mine)
  )
}
supplement_my_cars()
#> # A tibble: 1 × 13
#>  make_model    mpg  cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
#>  <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
#> 1 Honda Civic  30.4    4  75.7    52  4.93  1.62  18.5    1    1    4    2
#> # ℹ 1 more variable: color <chr>

bench::mark(
  inner_join = inner_join(mtcars_tbl, my_cars, "make_model"),
  manual = supplement_my_cars()
) %>%
  select(expression, median)
#> # A tibble: 2 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 inner_join    438µs
#> 2 manual      50.7µs
```

* **nest**

```
bench::mark(
  nest = nest(mtcars_tbl, .by = c(cyl, am)),
  vctrs = {
    res <- 
      vec_split(
        x = mtcars_tbl[setdiff(colnames(mtcars_tbl), nest_cols)],
        by = mtcars_tbl[nest_cols]
      )

    vec_cbind(res$key, new_tibble(list(data = res$val)))
  }
) %>%
  select(expression, median)

#> # A tibble: 2 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 nest        1.81ms
#> 2 vctrs      67.61µs

# Results of nesting
#> # A tibble: 6 × 3
#>    cyl    am data             
#>  <dbl> <dbl> <list>           
#> 1    6    1 <tibble [3 × 10]> 
#> 2    4    1 <tibble [8 × 10]> 
#> 3    6    0 <tibble [4 × 10]> 
#> 4    8    0 <tibble [12 × 10]>
#> 5    4    0 <tibble [3 × 10]> 
#> 6    8    1 <tibble [2 × 10]>
```

* **glue** and **paste0**

```
vec_paste0 <- function (...) {
  args <- vec_recycle_common(...)
  exec(paste0, !!!args)
}

name <- "Simon"
bench::mark(
  glue = glue::glue("My name is [{name}]{style='color: #990000'}."),
  vec_paste0 = vec_paste0("My name is ", name, "."),
  paste0 = paste0("My name is ", name, "."),
  check = FALSE
) %>% 
  select(expression, median)

#> # A tibble: 3 × 2
#>  expression  median
#>  <bch:expr> <bch:tm>
#> 1 glue        38.99µs
#> 2 vec_paste0  3.98µs
#> 3 paste0    861.01ns
```

* `paste0()` has some tricky recycling behavior. `vec_paste0` is a middle ground in terms of both performance and safety.
* Use `glue()` for errors, when the function will stop executing anyway.
* For simple pastes that are intended to be called repeatedly, use `vec_paste0()`.




















