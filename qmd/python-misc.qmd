# Misc {#sec-py-misc .unnumbered}

## Misc {#sec-py-misc-misc .unnumbered}

-   Random Seed

    ``` python
    import random
    random.seed(12)

    random.sample([1,2,3,4,5], 2)
    #> [4,3]
    ```

## Big Data {.unnumbered}

-   [{{datatable}}]{style="color: goldenrod"}
    -   Misc

        -   Resources
            -   [An Overview of Python's DataTable](https://towardsdatascience.com/an-overview-of-pythons-datatable-package-5d3a97394ee9)

    -   `fread`  for fast loading of large datasets

        ``` python
        import datatable as dt  # pip install datatable
        tps_dt = dt.fread("data/tps_september_train.csv").to_pandas()
        ```
-   For other options (e.g. Dask, Vaex, or cuDF) see this Kaggle [notebook](https://www.kaggle.com/rohanrao/tutorial-on-reading-large-datasets)
-   [{{cuDF}}]{style="color: goldenrod"}
    -   [Docs](https://docs.rapids.ai/api/cudf/stable/), Beginner's [tutorial](https://developer.nvidia.com/blog/pandas-dataframe-tutorial-beginners-guide-to-gpu-accelerated-dataframes-in-python/)
    -   Useful for extreme data sizes (e.g. 100s of billions of rows)
    -   similar to pandas syntax
-   [{{vaex}}]{style="color: goldenrod"}
    -   [Docs](https://vaex.io/docs/index.html)
-   [{{dask}}]{style="color: goldenrod"}
    -   See [MLOps \>\> Dask](mlops.qmd#sec-mlops-dask){style="color: green"}

## Functions {#sec-py-misc-func .unnumbered}

-   Suppress warnings

    ``` python
    import warnings
    warnings.filterwarnings("ignore")
    ```

-   `match`/`case`

    -   Similar to `switch` in R (See [R, Base R \>\> Functions](r-base-r.qmd#sec-r-baser-funs){style="color: green"}\>\> `switch`

    -   [Example]{.ribbon-highlight} ([source](https://x.com/bbelderbos/status/1801566856937148844))

        ``` python
        def show_options(options: dict|str, str|) -> None:
          for key, value in options.items():
            print(f"{key}: {value}")
          print()

        def main():
          options = {"1": "Add Item", "2": "Delete Item", "3": "View Item", "4": "Exit"}
          while True:
            show_options(options)
            selected_option = input("Choose an option: ")
            
            match selected_option:
              case "1":
                print("Add item logic here")
                # implement add item logic
              case "2":
                print("Delete item logic here")
                # implement view item logic
              case "3":
                print("View item logic here")
                # implement view item logic
              case "4":
                print("Goodbye!")
                break
              case _:
                print("Invalid option, please try again")
                continue
        ```
