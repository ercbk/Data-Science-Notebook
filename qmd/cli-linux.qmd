# Linux {#sec-cli-lin .unnumbered}

## Misc {#sec-cli-lin-misc .unnumbered}

-   Notes from
    -   [Bash for Data Scientists, Data Engineers & MLOps Engineers](https://towardsdatascience.com/bash-for-data-scientists-data-engineers-mlops-engineers-a8e389621e2e)
        -   Bunch of other stuff that I didn't take notes on
    -   [Bash Scripting on Linux: The Complete Guide](https://www.youtube.com/playlist?list=PLT98CRl2KxKGj-VKtApD8-zCqSaN2mD4w) - video course
-   Resources
    -   [Doc](https://docs.jade.fyi/gnu/bash/bash.html) - All on one page so you can just [ctrl + f]{.arg-text}
    -   Bash Scripting [Cheatsheet](https://devhints.io/bash)
    -   Curl [Docs](https://curl.se/docs/manpage.html)
-   `man <command>` displays documentation for command
-   Special Characters\
    ![](./_resources/CLI.resources/image.1.png){.lightbox width="532"}
    -   "\>" redirects the output from a program to a file.
        -   "\>\>" does the same thing, but it's appending to an existing file instead of overwriting it, if it already exists.
-   `.bashrc` is a shell script that Bash runs whenever it is started interactively. It initializes an interactive shell session. You can put any command in that file that you could type at the command prompt.
    -   You put commands here to set up the shell for use in your particular environment, or to customize things to your preferences.
    -   A common thing to put in `.bashrc` are aliases that you want to always be available.
-   Debian vs. Ubuntu (from ChatGPT)
    -   Stability vs. Freshness:
        -   Debian: Debian is known for its stability and reliability. It has a rigorous testing process and a conservative approach to updates, which makes it suitable for servers and systems where stability is crucial.
        -   Ubuntu: Ubuntu is based on Debian but tends to be more up-to-date with software packages. It follows a time-based release cycle, with regular releases every six months. This can be appealing if you want access to the latest features and software.
    -   Package Management:
        -   Debian: Debian uses the Debian Package Management System (dpkg) and Advanced Package Tool (APT) for package management. It has a vast repository of software packages.
        -   Ubuntu: Ubuntu also uses dpkg and APT but adds its own software management tools like Snap and Ubuntu Software Center. This can make software installation more user-friendly.
    -   Community and Support:
        -   Debian: Debian has a large and dedicated community, and it's known for its strong commitment to free and open-source software principles. It has a stable support structure, but community support may not be as user-friendly as Ubuntu's.
        -   Ubuntu: Ubuntu has a large and active community, and it offers both free and paid support options. The Ubuntu community is known for its user-friendliness and helpful forums, making it a good choice for beginners.
    -   Variants and Flavors:
        -   Debian: Debian offers different flavors, known as "Debian spins," catering to various needs, such as Debian Stable, Debian Testing, and Debian Unstable. These variants differ in terms of software stability and freshness.
        -   Ubuntu: Ubuntu has several official flavors (e.g., Ubuntu Desktop, Ubuntu Server, Kubuntu, Xubuntu) that come with different desktop environments. This variety allows users to choose an environment that suits their preferences.
    -   Licensing:
        -   Debian: Debian has a strict commitment to free and open-source software, prioritizing software that adheres to its Free Software Guidelines.
        -   Ubuntu: While Ubuntu also includes mostly free and open-source software, it may include some proprietary drivers and software by default, which can be a concern for users who prioritize a completely open-source system.
    -   Performance (Google Search AI)
        -   Debian is considered lightweight and much faster than Ubuntu. It comes with few pre-installed software.
    -   Hardware (Google Search AI)
        -   Debian works well on older hardware. Debian still offers a 32-bit version of the distro, while Ubuntu no longer offers a 32-bit version.

## Commands {#sec-cli-lin-com .unnumbered}

### Basic Commands {#sec-cli-lin-com-bas .unnumbered}

![](./_resources/CLI.resources/image.png){.lightbox width="532"}

-   `echo $SHELL` - prints the type of shell you're using
-   `echo $PATH` - prints all stored pathes
-   `export PATH="my_new_path:$PATH"` - store a new path
-   Command Syntax: `command -options arguments`
-   Piping Commands: `cat user_names.txt|sort|uniq`

### Aliases {#sec-cli-lin-com-ali .unnumbered}

-   Custom commands that you can define in order to avoid typing lengthy commands over and over again

-   [Examples]{.ribbon-highlight}

    ``` bash
    alias ll="ls -lah"
    alias gs="git status"
    alias gp="git push origin master"
    ```

-   Create safeguards for yourself

    ``` bash
    alias mv="mv -i"
    ```

    -   `mv` will automatically use the [i]{.arg-text} flag, so the terminal will warn you if the file you're about to move does already exist under the new directory,
        -   This way you don't accidentally overwrite files that you didn't mean to overwrite.

### Files/Directories {#sec-cli-lin-com-file .unnumbered}

-   List\
    ![](./_resources/CLI.resources/image.2.png){.lightbox width="532"}

    -   List 10 most recently modified files: `ls -lt | head`
    -   List files sorted by file size: `ls -l -S`
    -   List multiple directories: `ls ./docs ./text ./data`

-   Look at first 3 rows: `head -n3 students.csv`

-   Create/Delete Directories

    ``` bash
    mkdir <dir_name>
    rmdir <dir_name>
    ```

    -   [-v]{.arg-text} means "verbose" so it tells us if it was successful

-   Output to file: `echo “This is an example for redirect” > file1.txt`

-   Append line to file: `echo “This is the second line of the file” >> file1.txt`

-   Create/Delete file(s):

    ``` bash
    # Create files
    touch file1.txt
    touch file1.txt file2.tx

    # Delete files
    rm file1.txt
    rm file1.txt file2.txt
    ```

-   Move files/dir; Rename

    ``` bash
    # Move single file
    mv my_file.txt /tmp
    # Move multiple files
    mv file1 file2 file3 /tmp
    # move only .csv files to data directory and be verbose
    mv -v *.csv ./data/
    # Move a directory or multiple directories
    mv d1 d2 d3 /tmp
    # Rename the file using move command
    mv my_file1.txt my_file_newname.txt
    ```

    -   File(s) and directories being moved to "tmp" directory

-   Search

    -   Find

        ``` bash
        # syntax find <path> <expression>
        # Find by name
        find . -name “my_file.csv"
        #Wildcard search
        find . -name "*.jpg"
        # Find all the files in a folder
        find /temp
        # Search only files
        find /temp -type f
        # Search only directories
        find /temp -type d
        # Find file modified in last 3 hours
        find . -mmin -180
        # Find files modified in last 2 days
        find . -mtime -2
        # Find files not modified in last 2 days
        find . -mtime +2
        # Find the file by size
        find -type f -size +10M
        ```

    -   Search inside files

        -   `zgrep` - Search the compressed file or files content just providing the search term.
            -   Default: Prints the matched file name and the complete line

            -   Flags

                -   [-i]{.arg-text}: Ignore case
                -   [-n]{.arg-text}: Print only matched lines
                -   [-v]{.arg-text}: Print only unmatched lines (i.e. *not* pattern)
                -   [-o]{.arg-text}: Print only the matched part
                -   [-l]{.arg-text}: Print only file names
                -   [-h]{.arg-text}: Print only file lines
                -   [-c]{.arg-text}: Count matched lines
                -   [-e]{.arg-text}: Multiple search terms

            -   [Example]{.ribbon-highlight}: Search multiple files

                ``` bash
                zgrep ismail auth.log.*.gz
                ```

                -   Searches for the term "ismail" all files beginning with "auth.log." in their names.
                -   \*Could also provide each file's name separated by a space\*

            -   [Example]{.ribbon-highlight}: Search for multiple terms

                ``` bash
                zgrep -e "ismail" -e "ahmet" auth.log.2.gz
                ```

-   Locate (faster)

    -   [Docs](https://linuxize.com/post/locate-command-in-linux/)

    -   Install

        `bash sudo apt install mlocate # Debian`

    -   Usage

        ``` bash
        sudo updatedb # update before using
        locate .csv
        ```

-   Unzip: `unzip ./foia.zip`

-   Split files

    ``` bash
    # default: 1000 lines per file, names of new files: xaa, xab, xac, etc.
    split my_file

    # add a prefix to new file names
    split my_file my_prefix

    # specify split threshold (e.g. 5000) by number of lines
    split --lines=5000 my_file

    # specify split threshold by size (e.g. 10MB)
    split --bytes=10 MB my_file
    ```

-   Permissions

    -   `ls -l` See list of files and the permissions
    -   `-rwxrwxrwx` - sytax of permissions for a folder or directory
        -   "rwx" stand for read, write, and execute rights, respectively
        -   The 3 "rwx" blocks are for (1) user, (2) user group, and (3) everyone else.
            -   In the given example, all 3 of these entities have read, write, as well as execute permissions.
        -   The dash indicates that this is a file. Instead of the dash, you can also see a "d" for directory or "l" for a symbolic link.
    -   `chmod` - edit permissions
        -   [Example]{.ribbon-highlight}: `chmod u+x my_program.py` - makes this file executable for *yourself*
    -   `sudo` - "super user" - using this prefix gives you all the permissions to all the files
        -   `sudo su` - opens a stand alone super user shell

### Print {#sec-cli-lin-com-print .unnumbered}

-   Print file content

    ``` bash
    cat < my_file.txt
    # or
    cat my_file.txt
    ```

-   Print 1 pg at a time: `less my_file.txt`

-   Print specific number of lines: `head -n<num_lines> <file.csv>`

-   Print file content from bottom to top: `tac my_file.txt`

-   `cat -b log.txt | grep error` : shows all lines in log.txt that contain the string 'error', along with the line number (-b)

### Logicals and Conditionals {#sec-cli-lin-com-logcond .unnumbered}

-   [Logicals]{.underline}
    -   [;]{.arg-text} : `command1 ; command2`

        -   command 1 and command 2 run independently of each other

    -   [&]{.arg-text} : `command1 & command2`

        -   command 1 runs in the background and command 2 runs in the background

    -   [&&]{.arg-text} : `command1 && command2`

        -   If the first command errors out then the second command is not executed

    -   [\|\|]{.arg-text} : `command1 || command2`

        -   The second commmand is only execute if the first command errors

    -   [Example]{.ribbon-highlight}

        ``` bash
        cd my_dir && pwd || echo “No such directory exist.Check”
        ```

        -   If the my_dir exists, then the current working directory is printed. If the my_dir doesn't exist, then the message "No such directory exists. check" message is printed.
-   [Conditionals]{.underline}
    -   Use `[[ ]]` for conditions in `if` / `while` statements, instead of `[ ]` or `test`.
        -   `[[ ]]` is a bash builtin, and is more powerful than `[ ]` or `test`.
        -   Example: `if [[ -n "${TRACE-}" ]]; then set -o xtrace; fi`

### String Matching {#sec-cli-lin-com-stri .unnumbered}

-   [Example]{.ribbon-highlight}: Search for "error" and write to file

    ``` bash
    #output to a file again
    cat file1 file2 file3 | grep error | cat > error_file.txt
    #Append to the end
    cat file1 file2 file3 | grep error | cat >> error_file.txt
    ```

    -   Prints lines into grep which searches for "error" in each line. Lines with "error" get written to "error_file.txt"

-   Filter lines

    ``` bash
    grep -i “Doctorate” adult_t.csv |grep -i “Husband”|grep -i “Black”|csvlook
    # -i, --ignore-case-Ignore  case  distinctions,  so that characters that differ only in case match each other.
    ```

    -   Select all the candidates who have doctorates and a husband and race are Black
    -   `csvlook` is pretty printing from csvkit package (see [Big Data \>\> Larger Than Memory](big-data.html#sec-bgdat-lgmem){style="color: green"} \>\> csvkit)

-   Count how many rows fit the criteria

    ``` bash
    grep -i “Doctorate” adult_t.csv | wc -l
    ```

    -   Counts how many rows have "Doctorate"
        -   [-wc]{.arg-text} is "word count"

## Variables {#sec-cli-lin-var .unnumbered}

-   Local Variable:

    -   Declared at the command prompt
    -   Use lower case for name
    -   Available only in the current shell
    -   Not accessible by child processes or programs
    -   All user-defined variables are local variables

-   Environment (global) variables:

    -   Create with `export` command
    -   Use upper case for name
    -   Available to child processes

-   Declare local and environment variables then access via "\$"

    ``` bash
    # local
    ev_car=’Tesla’
    echo 'The ev car I like is' $ev_car

    # environment
    export EV_CAR=’Tesla’
    echo 'The ev car I like is' $EV_CAR
    ```

    -   No spaces in variable assignment

-   Calling variables

    -   `${var}` or `$var` vs `${var?}`

        ``` bash
        mv file1 file2 $subdir # oops, I overwrote file2
        mv file1 file2 ${subdir?} # error message instead of disaster
        ```

        -   Using `${var?}` throws an error when `var` has not been defined

-   Always quote variable accesses with double-quotes.

    -   One place where it's *okay* not to is on the *left-hand-side* of an `[[ ]]` condition. But even there I'd recommend quoting.
    -   When you need the unquoted behaviour, using bash arrays will likely serve you much better.

-   Functions

    -   Use local variables in functions.
    -   Accept multiple ways that users can ask for help and respond in kind.
        -   Check if the first arg is [-h]{.arg-text} or [--help]{.arg-text} or `help` or just `h` or even [-help]{.arg-text}, and in all these cases, print help text and exit.
    -   When printing error messages, please redirect to stderr.
        -   Use `echo 'Something unexpected happened' >&2` for this

## Functions {#sec-cli-lin-fun .unnumbered}

-   Basic

    ``` bash
    say_hello() {
      echo "hello"
    }
    say_hello
    ```

-   Using Return

    ``` bash
    failing_func () {
      return 1
    }
    ```

    -   `return` cannot take strings — only numbers 1 to 255

-   With arguments

    ``` bash
    say_hello() {
      echo "Hello $1 and $2"
    }
    say_hello "Ahmed" "Layla"
    ```

-   Declaring local and global variables

    ``` bash
    say_hello() {
      local x
      x=$(date)
      y=$(date)
    }
    ```

    -   `local` is a keyword
    -   [x]{.arg-text} is local and [y]{.arg-text} is global

-   Suppress errors

    ``` bash
    local x=$(moose)
    ```

    -   When `local` is used in the same line as the variable declaration, then the variable never errors. e.g. Even if [moose]{.arg-text} doesn't exist, this line won't trigger an error

## Scripting {#sec-cli-lin-script .unnumbered}

-   Use the .sh (or .bash) extension for your script

-   Use long options, where possible (like [--silent]{.arg-text} instead of [-s]{.arg-text}). These serve to document your commands explicitly.

-   If appropriate, change to the script's directory close to the start of the script.

    -   And it's usually always appropriate.
    -   Use `cd "$(dirname "$0")"`, which works in *most* cases.

-   Use `shellcheck` — analysis too for shell scripts. Heed its warnings. ([link](https://github.com/koalaman/shellcheck))

-   Shebang line

    -   Contains the absolute path of the bash interpreter
        -   List paths to all shells: `cat/etc/shells`
    -   Use as the first line even if you don't give executable permission to the script file.
    -   Starts with "#!" the states the path of the interpreter
    -   Example: `#!/bin/bash`
        -   Interpreter installed in directory "/bin"
    -   Example: `#!/usr/bin/env bash`

-   Commands that should start your script

    -   Use `set -o errexit`
        -   So that when a command fails, bash exits instead of continuing with the rest of the script.
    -   Use `set -o nounset`
        -   This will make the script fail, when accessing an unset variable. Saves from horrible unintended consequences, with typos in variable names.
        -   When you want to access a variable that may or may not have been set, use `"${VARNAME-}"` instead of `"$VARNAME"`, and you're good.
    -   Use `set -o pipefail`
        -   This will ensure that a pipeline command is treated as failed, even if one command in the pipeline fails.
    -   Use `set -o xtrace`, with a check on `$TRACE` env variable.
        -   For copy-paste: `if [[ -n "${TRACE-}" ]]; then set -o xtrace; fi`.
        -   This helps in debugging your scripts, a lot.
        -   People can now enable debug mode, by running your script as `TRACE=1 ./script.sh` instead of `./script.sh` .

-   [Example]{.ribbon-highlight}: Basic Execution a Bash Script

    -   Create a directory bash_script: `mkdir bash_script`

    -   Create a hello_world.sh file: `touch hello_script.sh`

    -   Open hello_script.sh (text editor?)

    -   Add code, save, and close

        ```         
        #!/bin/bash
        echo ‘Hello World’
        ```

    -   Make file executable: `chmod +x hello_world.sh`

    -   Execute file: `./hello_world.sh`

-   Setting and Executing Scripts with Arguments\
    ![](_resources/CLI.resources/lin-script-arg-1.png){.lightbox width="532"}

-   Template

    ``` bash
    #!/usr/bin/env bash
    set -o errexit
    set -o nounset
    set -o pipefail
    if [[ -n "${TRACE-}" ]]; then
        set -o xtrace
    fi
    if [[ "$1" =~ ^-*h(elp)?$ ]]; then
        echo 'Usage: ./script.sh arg-one arg-two
    This is an awesome bash script to make your life better.
    '
        exit
    fi
    cd "$(dirname "$0")"
    main() {
        echo do awesome stuff
    }
    main "$@"
    ```

## Debugging

![](_resources/CLI.resources/bash-debugging-x-trap-die-1.png){.lightbox width="532"}

-   Also see `set -o xtrace` in [Scripting](cli-linux.qmd#sec-cli-lin-script){style="color:green"} \>\> Commands that should start your script

## Job Management {#sec-cli-lin-jobm .unnumbered}

-   Programs/Scripts will by default run in the foreground, and prevent you from doing anything else until the program is done.
-   While program is running:
    -   [control+c]{.arg-text} - Will send a SIGINT (signal interrupt) signal to the program, which instructs the machine to interrupt the program immediately (unless the program has a way to handle these signals internally).
    -   [control+z]{.arg-text} - Will pause the program.
        -   After pausing the program can be continued either by bringing it to the foreground (`fg`), or by sending it to the backgroud (`bg`).
-   Execute script to run in the background: `python run.py &`
-   `jobs` - shows all running jobs and process ids (PIDS)
-   `kill` - sends signals to jobs running in the background
    -   `kill -STOP %1` sends a STOP signal, pausing program 1.
    -   `kill -KILL %1` sends a KILL signal, terminating program 1 permanently.

## tmux {#sec-cli-lin-tmux .unnumbered}

-   Terminal Multiplexer
-   Enables you to easily create new terminal sessions and navigate between them. This can be extremely useful, for example you can use one terminal to navigate your file system and another terminal to execute jobs.
-   [Installation]{.underline} (if necessary): `sudo apt install tmux`
    -   Typically comes with the linux installation
-   [Sessions]{.underline}
    -   `tmux` - starts an unnamed session
    -   `tmux new -s moose` creates new terminal session with name 'moose'
    -   `tmux ls` - lists all running sessions
    -   `tmux kill-session -t moose` - kills session named "moose"
    -   `exit` - stops and quits the current session
    -   Kill all sessions (various opinions on how to do this)
        -   `tmux kill-session`
        -   `tmux kill-server`
        -   `tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill`
-   [Attach/Detach]{.underline}
    -   When you log out of a remote machine (either on purpose or accidentally), all of the programs that were actively running inside your shell are automatically terminated. On the other hand, if you run your programs inside a tmux shell, you can come simply detach the tmux window, log out, *close* your computer, and come back to that shell later as if you've never been logged out.
    -   `tmux detach` - detach current session
    -   [control+b]{.arg-text}`then press`d\`: When you have multiple sesssions running, this will allow you to select the session to detach
    -   From inside bash and not inside a session
        -   `tmux a` : attach to latest created session
        -   `tmux a -t moose` : attach to session called 'moose'
-   [Pane Creation and Navigation]{.underline}
    -   [control+b]{.arg-text} then press ["]{.arg-text} (i.e. [shift+']{.arg-text}): add another terminal pane below
    -   [control+b]{.arg-text} then press [%]{.arg-text} (i.e. [shift+5]{.arg-text}) : add another terminal pane to the right
    -   [control+b]{.arg-text} then press [→]{.arg-text} : move to the terminal pane on the right (similar for left, up, down)

## SSH {#sec-cli-lin-ssh .unnumbered}

-   Typically uses a key pair to log into remote machines
    -   Key pair consists of a public key (which both machines have access to) and a private key (which only your own machine has access to)
    -   "ssh-keygen" is a program for generating such a key pair.
        -   If you run ssh-keygen, it will by default create a public key named "id_rsa.pub" and a private key named "id_rsa", and place both into your "\~/.ssh" directory
        -   You'll need to add the public key to the remote machine by piping together cat, ssh, and a streaming operator
            -   `cat .ssh/id_rsa.pub | ssh user@remote 'cat >> ~/.ssh/authorized_keys'`
-   Connect to the remote machine: `ssh remote -i ~/.ssh/id_rsa`
-   Create a config file instead
    -   Location: "\~/.ssh/config"

    -   Contents

        ```         
        Host dev
          HostName remote
          IdentityFile ~/.ssh/id_rsa
        ```
-   Connect using config: `ssh dev`
-   For Windows and using Putty, see
    -   [AWS \>\> EC2 \>\> Connect to/ Terminate Instance](aws.qmd#sec-aws-ec2-conterm){style="color: green"}
    -   Projects Notebook \>\> Article, Nested Cross Validation \>\> Notes \>\> Running EC2 instances checklist

## Packages {#sec-cli-lin-pkg .unnumbered}

-   Common package managers: apt, Pacman, yum, and portage
-   [APT]{.underline} (Advanced Package Tool)
    -   The `apt` command is a smaller section of the `apt-get` and `apt-cache` options. The `apt` command gives the end user just enough tools to install, remove, search and update APT packages. The `apt-get` command has a lot more options that are useful for writing low-level scripts and tools.

    -   Install Packages

        ``` bash
        # one pkg
        sudo apt-get install <package_name>
        # multiple
        sudo apt-get install <pkg_name1> <pkg_name2>
        ```

        -   Install but no upgrade: `sudo apt-get install <pkg_name> --no-upgrade`

    -   Search for an installed package: `apt-cache search <pkg_name>`

    -   Update package information prior to "upgrading" the packages

        ``` bash
        sudo apt-get update
        ```

        -   Downloads the package lists from the repositories and "updates" them to get information on the newest versions of packages and their dependencies.

    -   Upgrade

        ``` bash
        # all installed packages
        sudo apt-get upgrade

        # To upgrade only a specific program
        sudo apt-get upgrade <package_name>

        # Upgrades and handles dependencies; delete obsolete, add new
        apt-get dist-upgrade

        # together
        sudo apt-get update && sudo apt-get dist-upgrade
        ```

## Expressions {#sec-cli-lin-expr .unnumbered}

-   Sort data, filter only unique lines, and write to file: `cat adult_t.csv | sort | uniq -c > sorted_list.csv`
