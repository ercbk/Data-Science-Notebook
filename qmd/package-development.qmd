# Package Development {#sec-pkgdev .unnumbered}

## Misc {#sec-pkgdev-misc .unnumbered}

-   Developing Internal Packages

    -   Developing packages for your company's specific use cases increases efficiency
        -   Examples
            -   Collection
                -   Pulling data from public sources
            -   Database
                -   Connections and Querying
                -   API requests
                -   ETL processes
            -   Report building
                -   Data manipulation
                -   Visualization
    -   See [Building a team of internal R packages \| Emily Riederer](https://emilyriederer.netlify.app/post/team-of-packages/) and [VIDEO How to make internal R packages part of your team - RStudio](https://resources.rstudio.com/resources/rstudioglobal-2021/organization-how-to-make-internal-r-packages-part-of-your-team/)
        -   Also [{]{style="color: #990000"}[RDepot](https://www.r-bloggers.com/2021/02/rdepot-1-4-3/){style="color: #990000"}[}]{style="color: #990000"} for management

## Dependencies {#sec-pkgdev-depend .unnumbered}

-   Imports and Depends

    -   Imports just *loads* the package
        -   Unless there is a good reason otherwise, you should always list packages in Imports not Depends. That's because a good package is self-contained, and minimises changes to the global environment (including the search path)
    -   Depends *attaches* it.

-   Loading and Attaching

    -   Loading
        -   The package is available in memory, but because it's not in the search path (path that R searches for functions), you won't be able to access its components without using ::.
    -   Attaching
        -   Puts the package in the search path. You can't attach a package without first loading it
        -   Both `library()` (throws error when pkg not installed )or `require()` (just returns false when pkg not installed) load then attach the package

## Data {#sec-pkgdev-dat .unnumbered}

-   If you want to store binary data and make it available to the user, put it in **data/**. This is the best place to put example datasets. If you want to store parsed data, but NOT make it available to the user, put it in **R/sysdata.rda**. This is the best place to put data that your functions need.
-   If you want to store raw data, put it in **inst/extdata**.

## Testing {#sec-pkgdev-test .unnumbered}

-   The [{testthat}]{style="color: #990000"} explicitly evaluates the outputs of your function but you can add a test that makes sure the checks on inputs within the function are working
-   Set-up - Run `usethis::use_testthat` within the project directory
    -   Creates:
        -   A tests folder in your working directory
        -   A testthat folder in the tests folder where your tests will live
        -   A testthat.R file in the tests folder which organises things for running. Don't modify this manually.
-   Names of your testing files must begin with 'test'
    -   e.g. testing file, 'test-my-function.R', which lives in testthat folder
-   Writing Tests
    -   Write tests using the `test_that` function, and with each test, there's an "expectation."
    -   You can have one or more tests in each file and one or more expectations within each test.
    -   [Example]{.ribbon-highlight}\
        ![](./_resources/Package_Development.resources/image.png){width="432"}
        -   Where [sse]{.arg-text} is the function you're testing
    -   [Example]{.ribbon-highlight} `expect_error(compute_corr(data = faithful, var1 = erruptions, var2 = waiting)`
        -   [erruptions]{.var-text} isn't a column in the dataset and should throw an error because of a check inside the function
        -   Also `expect_warning()` available
    -   [Example]{.ribbon-highlight}: Compare optional outputs of a nested function to the individual functions within that nested function\
        ![](./_resources/Package_Development.resources/image.2.png){width="532"}
        -   [error]{.arg-text} is the nested function with optional outputs of sse error or mape error
        -   Second chunk should say "mape calculations work"
        -   1st chunk checks if error with sse option output is the same as sse output
        -   2nd chunk checks if error with mape option output is the same as mape output
-   Run Tests
    -   Use the [test_file]{.arg-text} function\
        ![](./_resources/Package_Development.resources/image.1.png){width="432"}
    -   Use the [test_dir]{.arg-text} function: e.g. `test_dir(wd$test_that)` for running all tests.
    -   Press the Run Tests button in R Studio if you open the test file.
    -   Highlight and run the code.
