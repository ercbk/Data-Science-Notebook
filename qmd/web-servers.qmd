# Server {#sec-web-server .unnumbered}

# Misc {#sec-web-server-misc .unnumbered}

-   Resources
    -   Heiss [guide](https://www.andrewheiss.com/blog/2024/01/12/diy-api-plumber-quarto-ojs/_book/deploying.html#the-super-easy-way) on setting up a caddy server on a Digital Ocean droplet with Docker and {plumber}
-   Hosting files with basic security ([Thread](https://fosstodon.org/@wronglang@bayes.club/113294094603241847))
    -   Host a http server and use randomized path for hosting things you want to not make completely public.
    -   Turn off directory listings for the directory with the randomized paths
        -   They're secure until someone shares a link outside of the group you want to have it.
    -   If you want to set up "basic auth" you can have a slightly awkward username/password setup.
-   Differences between caddy and nginx (ChatGPT 3.5)
    -   Configuration:
        -   Nginx uses a complex, block-based configuration language, which can be challenging for beginners.
        -   Caddy uses a simpler, declarative configuration file called the Caddyfile.
    -   Automatic HTTPS:
        -   Nginx requires manual configuration for HTTPS and certificate management.
        -   Caddy automatically obtains and manages TLS certificates, making it easier to secure your website.
    -   Plugins:
        -   Nginx has a vast ecosystem of third-party modules, but adding these can increase complexity.
        -   Caddy has built-in modules for common tasks like logging, rate limiting, and authentication, reducing reliance on external tools.
    -   Performance:
        -   Both are performant, but benchmarks often show Caddy with a slight edge in low-resource situations.
    -   Ease of use:
        -   Caddy is generally considered easier to learn and use due to its simpler configuration and focus on automation.
        -   Nginx has a steeper learning curve but offers more control for experienced users.
-   Harrell on the benefits of Netlify vs AWS ([source](https://www.fharrell.com/post/web/))
    -   "... when you have to support your own Linux or Windows web server such as an AWS Lightsail instance, the time spent in keeping the site secure and software updated is significant, and doing updates to web pages is not as easy as the local `~/web`Â Netlify mirroring approach. It is far easier to host a static web site where Netlify takes care of 100% of system and web server software issues. There is nothing to update on your site other than the actual web content."
