# Regex {#sec-regex .unnumbered}

## Misc {#sec-regex-misc .unnumbered}

-   For logical expressions, order matters. Therefore, more complicated patterns should precede simplier patterns.
    -   [Example]{.ribbon-highlight}:
        -   `(\\w+|\\w+\\s\\w+)` says to extract single words then extract compound words or expressions, but since compound words are made up of single words, it will only extract the first halves and miss the whole compound word
        -   `((\\w+\\s\\w+)|\\w+)` will extract the compound word and then the single words.
-   Extract anything once: `(.*?)`
-   Match empty lines: `"^$"`

## Patterns {#sec-regex-pats .unnumbered}

-   Extracting Words and Compound Words at the Beginning

    ``` r
    qmd_txt
    #> [1] "-   200 Status - An API serving an ML model returns a HTTP 200 OK success status response code indicates that the request has succeeded." 
    #> [2] "-   AMI - amazon machine image. Thing that has R and the main packages you need to load onto the cloud server"
    #> [3] "-   Anti-patterns - certain patterns in software development that are considered bad programming practices."
    ```

    ``` r
    qmd_txt |> 
      str_extract(pattern = "^\\-   ((\\w+\\s\\w+)|(\\w+[^\\w\\s*]+\\w+)|\\w+)")

    #> [1] "-   200 Status"                 
    #> [2] "-   AMI"          
    #> [3] "-   Anti-patterns"
    ```

    -   `(\\w+\\s\\w+)` matches patterns of "word + space + word"
    -   `(\\w+[^\\w\\s*]+\\w+)` matches patterns of "word + (not word and not space) + word"
    -   `\\w+` matches word
